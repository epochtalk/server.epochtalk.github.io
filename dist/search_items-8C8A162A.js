searchNodes=[{"doc":"EpochtalkServer keeps the contexts that define your domain and business logic. Contexts are also responsible for managing your data, regardless if it comes from the database, an external API or others.","ref":"EpochtalkServer.html","title":"EpochtalkServer","type":"module"},{"doc":"Guardian provides a singular interface for authentication in Elixir applications that is token based. Tokens should be: tamper proof include a payload (claims) JWT tokens (the default) fit this description. When using Guardian, you'll need an implementation module. defmodule MyApp.Guardian do use Guardian , otp_app : :my_app def subject_for_token ( resource , _claims ) , do : { :ok , to_string ( resource . id ) } def resource_from_claims ( claims ) do find_me_a_resource ( claims [ &quot;sub&quot; ] ) # {:ok, resource} or {:error, reason} end end This module is what you will use to interact with tokens in your application. When you use Guardian, the :otp_app option is required. Any other option provided will be merged with the configuration in the config files. The Guardian module contains some generated functions and some callbacks. Generated functions default_token_type() Overridable. Provides the default token type for the token - &quot;access&quot; Token types allow a developer to mark a token as having a particular purpose. Different types of tokens can then be used specifically in your app. Types may include (but are not limited to): &quot;access&quot; &quot;refresh&quot; Access tokens should be short lived and are used to access resources on your API. Refresh tokens should be longer lived and whose only purpose is to exchange for a shorter lived access token. To specify the type of token, use the :token_type option in the encode_and_sign function. Token type is encoded into the token in the &quot;typ&quot; field. Return - a string. peek(token) Inspect a tokens payload. Note that this function does no verification. Return - a map including the :claims key. config() , config(key, default \\\\ nil) Without argument config will return the full configuration Keyword list. When given a key and optionally a default, config will fetch a resolved value contained in the key. See Guardian.Config.resolve_value/1 encode_and_sign(resource, claims \\\\ %{}, opts \\\\ []) Creates a signed token. Arguments: resource - The resource to represent in the token (i.e. the user) claims - Any custom claims that you want to use in your token opts - Options for the token module and callbacks For more information on options see the documentation for your token module. # Provide a token using the defaults including the default_token_type { :ok , token , full_claims } = MyApp.Guardian . encode_and_sign ( user ) # Provide a token including custom claims { :ok , token , full_claims } = MyApp.Guardian . encode_and_sign ( user , %{ some : &quot;claim&quot; } ) # Provide a token including custom claims and a different token type/ttl { :ok , token , full_claims } = MyApp.Guardian . encode_and_sign ( user , %{ some : &quot;claim&quot; } , token_type : &quot;refresh&quot; , ttl : { 4 , :weeks } ) The encode_and_sign function calls a number of callbacks on your implementation module. See Guardian.encode_and_sign/4 decode_and_verify(token, claims_to_check \\\\ %{}, opts \\\\ []) Decodes a token and verifies the claims are valid. Arguments: token - The token to decode claims_to_check - A map of the literal claims that should be matched. If any of the claims do not literally match verification fails. opts - The options to pass to the token module and callbacks Callbacks: decode_and_verify calls a number of callbacks on your implementation module, See Guardian.decode_and_verify/4 # Decode and verify using the defaults { :ok , claims } = MyApp.Guardian . decode_and_verify ( token ) # Decode and verify with literal claims check. # If the claims in the token do not match those given verification will fail { :ok , claims } = MyApp.Guardian . decode_and_verify ( token , %{ match : &quot;claim&quot; } ) # Decode and verify with literal claims check and options. # Options are passed to your token module and callbacks { :ok , claims } = MyApp.Guardian . decode_and_verify ( token , %{ match : &quot;claim&quot; } , some : &quot;secret&quot; ) revoke(token, opts \\\\ []) Revoke a token. Note: this is entirely dependent on your token module and implementation callbacks. { :ok , claims } = MyApp.Guardian . revoke ( token , some : &quot;option&quot; ) refresh(token, opts \\ []) Refreshes the time on a token. This is used to re-issue a token with essentially the same claims but with a different expiry. Tokens are verified before performing the refresh to ensure only valid tokens may be refreshed. Arguments: token - The old token to refresh opts - Options to pass to the Implementation Module and callbacks Options: :ttl - The new ttl. If not specified the default will be used. { :ok , { old_token , old_claims } , { new_token , new_claims } } = MyApp.Guardian . refresh ( old_token , ttl : { 1 , :hour } ) See Guardian.refresh exchange(old_token, from_type, to_type, options) Exchanges one token for another of a different type. Especially useful to trade in a refresh token for an access one. Tokens are verified before performing the exchange to ensure that only valid tokens may be exchanged. Arguments: old_token - The existing token you wish to exchange. from_type - The type the old token must be. Can be given a list of types. to_type - The new type of token that you want back. options - The options to pass to the token module and callbacks. Options: Options may be used by your token module or callbacks. ttl - The ttl for the new token See Guardian.exchange Note: Copied from Guardian Docs","ref":"EpochtalkServer.Auth.Guardian.html","title":"EpochtalkServer.Auth.Guardian","type":"module"},{"doc":"An optional callback invoked after the token has been generated and signed.","ref":"EpochtalkServer.Auth.Guardian.html#after_encode_and_sign/4","title":"EpochtalkServer.Auth.Guardian.after_encode_and_sign/4","type":"function"},{"doc":"Callback implementation for Guardian.after_sign_in/5 .","ref":"EpochtalkServer.Auth.Guardian.html#after_sign_in/5","title":"EpochtalkServer.Auth.Guardian.after_sign_in/5","type":"function"},{"doc":"Callback implementation for Guardian.before_sign_out/3 .","ref":"EpochtalkServer.Auth.Guardian.html#before_sign_out/3","title":"EpochtalkServer.Auth.Guardian.before_sign_out/3","type":"function"},{"doc":"Callback implementation for Guardian.build_claims/3 .","ref":"EpochtalkServer.Auth.Guardian.html#build_claims/3","title":"EpochtalkServer.Auth.Guardian.build_claims/3","type":"function"},{"doc":"Fetches the configuration for this module.","ref":"EpochtalkServer.Auth.Guardian.html#config/0","title":"EpochtalkServer.Auth.Guardian.config/0","type":"function"},{"doc":"Returns a resolved value of the configuration found at a key. See Guardian.Config.resolve_value/1 .","ref":"EpochtalkServer.Auth.Guardian.html#config/2","title":"EpochtalkServer.Auth.Guardian.config/2","type":"function"},{"doc":"Decodes and verifies a token using the configuration on the implementation module. See Guardian.decode_and_verify/4 .","ref":"EpochtalkServer.Auth.Guardian.html#decode_and_verify/3","title":"EpochtalkServer.Auth.Guardian.decode_and_verify/3","type":"function"},{"doc":"The default type of token for this module.","ref":"EpochtalkServer.Auth.Guardian.html#default_token_type/0","title":"EpochtalkServer.Auth.Guardian.default_token_type/0","type":"function"},{"doc":"Encodes the claims. See Guardian.encode_and_sign/4 for more information.","ref":"EpochtalkServer.Auth.Guardian.html#encode_and_sign/3","title":"EpochtalkServer.Auth.Guardian.encode_and_sign/3","type":"function"},{"doc":"Exchanges a token of one type for another. See Guardian.exchange for more information.","ref":"EpochtalkServer.Auth.Guardian.html#exchange/4","title":"EpochtalkServer.Auth.Guardian.exchange/4","type":"function"},{"doc":"Callback implementation for Guardian.on_exchange/3 .","ref":"EpochtalkServer.Auth.Guardian.html#on_exchange/3","title":"EpochtalkServer.Auth.Guardian.on_exchange/3","type":"function"},{"doc":"An optional callback invoked when a token is refreshed.","ref":"EpochtalkServer.Auth.Guardian.html#on_refresh/3","title":"EpochtalkServer.Auth.Guardian.on_refresh/3","type":"function"},{"doc":"An optional callback invoked when a token is revoked.","ref":"EpochtalkServer.Auth.Guardian.html#on_revoke/3","title":"EpochtalkServer.Auth.Guardian.on_revoke/3","type":"function"},{"doc":"An optional callback invoked after the claims have been validated.","ref":"EpochtalkServer.Auth.Guardian.html#on_verify/3","title":"EpochtalkServer.Auth.Guardian.on_verify/3","type":"function"},{"doc":"Provides the content of the token but without verification of either the claims or the signature. Claims will be present at the :claims key. See Guardian.peek/2 for more information.","ref":"EpochtalkServer.Auth.Guardian.html#peek/1","title":"EpochtalkServer.Auth.Guardian.peek/1","type":"function"},{"doc":"Refresh a token. See Guardian.refresh for more information.","ref":"EpochtalkServer.Auth.Guardian.html#refresh/2","title":"EpochtalkServer.Auth.Guardian.refresh/2","type":"function"},{"doc":"Fetches the resource that is represented by claims. For JWT this would normally be found in the sub field.","ref":"EpochtalkServer.Auth.Guardian.html#resource_from_claims/1","title":"EpochtalkServer.Auth.Guardian.resource_from_claims/1","type":"function"},{"doc":"Fetch the resource and claims directly from a token. See Guardian.resource_from_token for more information.","ref":"EpochtalkServer.Auth.Guardian.html#resource_from_token/3","title":"EpochtalkServer.Auth.Guardian.resource_from_token/3","type":"function"},{"doc":"Revoke a token. See Guardian.revoke for more information.","ref":"EpochtalkServer.Auth.Guardian.html#revoke/2","title":"EpochtalkServer.Auth.Guardian.revoke/2","type":"function"},{"doc":"If Guardian.Plug.SlidingCookie is used, this callback will be invoked to return the new claims, or an error (which will mean the cookie will not be refreshed).","ref":"EpochtalkServer.Auth.Guardian.html#sliding_cookie/3","title":"EpochtalkServer.Auth.Guardian.sliding_cookie/3","type":"function"},{"doc":"Fetches the subject for a token for the provided resource and claims The subject should be a short identifier that can be used to identify the resource.","ref":"EpochtalkServer.Auth.Guardian.html#subject_for_token/2","title":"EpochtalkServer.Auth.Guardian.subject_for_token/2","type":"function"},{"doc":"Callback implementation for Guardian.verify_claims/2 .","ref":"EpochtalkServer.Auth.Guardian.html#verify_claims/2","title":"EpochtalkServer.Auth.Guardian.verify_claims/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html","title":"EpochtalkServer.Auth.Guardian.Plug","type":"module"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#authenticated?/2","title":"EpochtalkServer.Auth.Guardian.Plug.authenticated?/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#clear_remember_me/2","title":"EpochtalkServer.Auth.Guardian.Plug.clear_remember_me/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#current_claims/2","title":"EpochtalkServer.Auth.Guardian.Plug.current_claims/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#current_resource/2","title":"EpochtalkServer.Auth.Guardian.Plug.current_resource/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#current_token/2","title":"EpochtalkServer.Auth.Guardian.Plug.current_token/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#implementation/0","title":"EpochtalkServer.Auth.Guardian.Plug.implementation/0","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#put_current_claims/3","title":"EpochtalkServer.Auth.Guardian.Plug.put_current_claims/3","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#put_current_resource/3","title":"EpochtalkServer.Auth.Guardian.Plug.put_current_resource/3","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#put_current_token/3","title":"EpochtalkServer.Auth.Guardian.Plug.put_current_token/3","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#put_session_token/3","title":"EpochtalkServer.Auth.Guardian.Plug.put_session_token/3","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#remember_me/4","title":"EpochtalkServer.Auth.Guardian.Plug.remember_me/4","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#remember_me_from_token/4","title":"EpochtalkServer.Auth.Guardian.Plug.remember_me_from_token/4","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#sign_in/4","title":"EpochtalkServer.Auth.Guardian.Plug.sign_in/4","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#sign_out/2","title":"EpochtalkServer.Auth.Guardian.Plug.sign_out/2","type":"function"},{"doc":"Role cache genserver, stores roles in memory for quick lookup","ref":"EpochtalkServer.Cache.Role.html","title":"EpochtalkServer.Cache.Role","type":"module"},{"doc":"Returns all Role s","ref":"EpochtalkServer.Cache.Role.html#all/0","title":"EpochtalkServer.Cache.Role.all/0","type":"function"},{"doc":"Returns a Role or list of Role s for specified lookup or list of lookups","ref":"EpochtalkServer.Cache.Role.html#by_lookup/1","title":"EpochtalkServer.Cache.Role.by_lookup/1","type":"function"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"EpochtalkServer.Cache.Role.html#child_spec/1","title":"EpochtalkServer.Cache.Role.child_spec/1","type":"function"},{"doc":"Reloads role cache with latest role configurations Non-blocking; does not return anything","ref":"EpochtalkServer.Cache.Role.html#reload/0","title":"EpochtalkServer.Cache.Role.reload/0","type":"function"},{"doc":"Start genserver and create a reference for supervision tree","ref":"EpochtalkServer.Cache.Role.html#start_link/1","title":"EpochtalkServer.Cache.Role.start_link/1","type":"function"},{"doc":"Used to generate and send emails from the API to a User .","ref":"EpochtalkServer.Mailer.html","title":"EpochtalkServer.Mailer","type":"module"},{"doc":"","ref":"EpochtalkServer.Mailer.html#deliver/2","title":"EpochtalkServer.Mailer.deliver/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Mailer.html#deliver!/2","title":"EpochtalkServer.Mailer.deliver!/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Mailer.html#deliver_many/2","title":"EpochtalkServer.Mailer.deliver_many/2","type":"function"},{"doc":"Sends confirmation email","ref":"EpochtalkServer.Mailer.html#send_confirm_account/1","title":"EpochtalkServer.Mailer.send_confirm_account/1","type":"function"},{"doc":"Sends mention notification email","ref":"EpochtalkServer.Mailer.html#send_mention_notification/1","title":"EpochtalkServer.Mailer.send_mention_notification/1","type":"function"},{"doc":"Sends thread subscription email","ref":"EpochtalkServer.Mailer.html#send_thread_subscription/1","title":"EpochtalkServer.Mailer.send_thread_subscription/1","type":"function"},{"doc":"AutoModeration model, for performing actions relating to User AutoModeration","ref":"EpochtalkServer.Models.AutoModeration.html","title":"EpochtalkServer.Models.AutoModeration","type":"module"},{"doc":"Add AutoModeration rule","ref":"EpochtalkServer.Models.AutoModeration.html#add/1","title":"EpochtalkServer.Models.AutoModeration.add/1","type":"function"},{"doc":"Get all AutoModeration rules","ref":"EpochtalkServer.Models.AutoModeration.html#all/0","title":"EpochtalkServer.Models.AutoModeration.all/0","type":"function"},{"doc":"Create changeset for AutoModeration model","ref":"EpochtalkServer.Models.AutoModeration.html#create_changeset/2","title":"EpochtalkServer.Models.AutoModeration.create_changeset/2","type":"function"},{"doc":"Executes AutoModeration rules TODO(akinsey): Optimize and store rules in Redis so we dont have to query every request Rule Anatomy Only works on posts = Name: Name for this rule (for admin readability) = Description: What this rule does (for admin readbility) = Message: Error reported back to the user on reject action = Conditions: condition regex will only work on body thread_id user_id title (although it's not much use) == REGEX IS AN OBJECT with a pattern and flag property Multiple conditions are allow but they all must pass to enable rule actions = Actions: reject, ban, edit, delete (filter not yet implemented) = Options: banInterval: - Affects ban action . - Leave blank for permanent - Otherwise , JS date string edit: - replace ( replace chunks of text ) : - regex : Regex used to match post body - regex object has a pattern and flag property - text : Text used to replace any matches - template : String template used to add text above or below post body","ref":"EpochtalkServer.Models.AutoModeration.html#moderate/2","title":"EpochtalkServer.Models.AutoModeration.moderate/2","type":"function"},{"doc":"Remove AutoModeration rule","ref":"EpochtalkServer.Models.AutoModeration.html#remove/1","title":"EpochtalkServer.Models.AutoModeration.remove/1","type":"function"},{"doc":"Updates an existing AutoModeration rule in the database and reloads role cache","ref":"EpochtalkServer.Models.AutoModeration.html#update/1","title":"EpochtalkServer.Models.AutoModeration.update/1","type":"function"},{"doc":"Creates an update changeset for AutoModeration model","ref":"EpochtalkServer.Models.AutoModeration.html#update_changeset/2","title":"EpochtalkServer.Models.AutoModeration.update_changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.AutoModeration.html#t:t/0","title":"EpochtalkServer.Models.AutoModeration.t/0","type":"type"},{"doc":"Ban model, for performing actions relating to banning","ref":"EpochtalkServer.Models.Ban.html","title":"EpochtalkServer.Models.Ban","type":"module"},{"doc":"Used to ban a User permanently. Updates supplied User model to reflect ban and returns.","ref":"EpochtalkServer.Models.Ban.html#ban/1","title":"EpochtalkServer.Models.Ban.ban/1","type":"function"},{"doc":"Used to ban a User until supplied expiration . Passing nil for expiration will permanently ban the User . Updates supplied User model to reflect ban and returns.","ref":"EpochtalkServer.Models.Ban.html#ban/2","title":"EpochtalkServer.Models.Ban.ban/2","type":"function"},{"doc":"Used to ban a User by user_id until supplied expiration . Passing nil for expiration will permanently ban the User","ref":"EpochtalkServer.Models.Ban.html#ban_by_user_id/2","title":"EpochtalkServer.Models.Ban.ban_by_user_id/2","type":"function"},{"doc":"Create ban changeset for Ban model, handles upsert of ban for banning","ref":"EpochtalkServer.Models.Ban.html#ban_changeset/2","title":"EpochtalkServer.Models.Ban.ban_changeset/2","type":"function"},{"doc":"Fetches Ban associated with a specific User","ref":"EpochtalkServer.Models.Ban.html#by_user_id/1","title":"EpochtalkServer.Models.Ban.by_user_id/1","type":"function"},{"doc":"Create generic changeset for Ban model","ref":"EpochtalkServer.Models.Ban.html#changeset/2","title":"EpochtalkServer.Models.Ban.changeset/2","type":"function"},{"doc":"Used to unban a User . Updates supplied User model to reflect unbanning and returns.","ref":"EpochtalkServer.Models.Ban.html#unban/1","title":"EpochtalkServer.Models.Ban.unban/1","type":"function"},{"doc":"Used to unban a User by user_id . Will return {:ok, nil} if user was never banned.","ref":"EpochtalkServer.Models.Ban.html#unban_by_user_id/1","title":"EpochtalkServer.Models.Ban.unban_by_user_id/1","type":"function"},{"doc":"Create unban changeset for Ban model, handles update of ban for unbanning","ref":"EpochtalkServer.Models.Ban.html#unban_changeset/2","title":"EpochtalkServer.Models.Ban.unban_changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Ban.html#t:t/0","title":"EpochtalkServer.Models.Ban.t/0","type":"type"},{"doc":"BannedAddress model, for performing actions relating to banning by ip/hostname","ref":"EpochtalkServer.Models.BannedAddress.html","title":"EpochtalkServer.Models.BannedAddress","type":"module"},{"doc":"Calculates the malicious score of the provided IP address, float score is returned if IP/Hostname are malicious, otherwise nil","ref":"EpochtalkServer.Models.BannedAddress.html#calculate_malicious_score_from_ip/1","title":"EpochtalkServer.Models.BannedAddress.calculate_malicious_score_from_ip/1","type":"function"},{"doc":"Creates changeset of BannedAddress model with hostname information","ref":"EpochtalkServer.Models.BannedAddress.html#hostname_changeset/2","title":"EpochtalkServer.Models.BannedAddress.hostname_changeset/2","type":"function"},{"doc":"Creates changeset of BannedAddress model with IP information","ref":"EpochtalkServer.Models.BannedAddress.html#ip_changeset/2","title":"EpochtalkServer.Models.BannedAddress.ip_changeset/2","type":"function"},{"doc":"Upserts a BannedAddress into the database and handles calculation of weight accounting for decay","ref":"EpochtalkServer.Models.BannedAddress.html#upsert/1","title":"EpochtalkServer.Models.BannedAddress.upsert/1","type":"function"},{"doc":"Creates changeset for upsert of BannedAddress model","ref":"EpochtalkServer.Models.BannedAddress.html#upsert_changeset/2","title":"EpochtalkServer.Models.BannedAddress.upsert_changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.BannedAddress.html#t:t/0","title":"EpochtalkServer.Models.BannedAddress.t/0","type":"type"},{"doc":"Board model, for performing actions relating to forum boards","ref":"EpochtalkServer.Models.Board.html","title":"EpochtalkServer.Models.Board","type":"module"},{"doc":"Given an id and moderated property, returns boolean indicating if Board allows self moderation","ref":"EpochtalkServer.Models.Board.html#allows_self_moderation?/2","title":"EpochtalkServer.Models.Board.allows_self_moderation?/2","type":"function"},{"doc":"Used to obtain breadcrumb data for a specific Board given it's slug","ref":"EpochtalkServer.Models.Board.html#breadcrumb/1","title":"EpochtalkServer.Models.Board.breadcrumb/1","type":"function"},{"doc":"Create generic changeset for Board model","ref":"EpochtalkServer.Models.Board.html#changeset/2","title":"EpochtalkServer.Models.Board.changeset/2","type":"function"},{"doc":"Creates a new Board in the database","ref":"EpochtalkServer.Models.Board.html#create/1","title":"EpochtalkServer.Models.Board.create/1","type":"function"},{"doc":"Create changeset for creation of Board model","ref":"EpochtalkServer.Models.Board.html#create_changeset/2","title":"EpochtalkServer.Models.Board.create_changeset/2","type":"function"},{"doc":"Find a Board by it's id","ref":"EpochtalkServer.Models.Board.html#find_by_id/1","title":"EpochtalkServer.Models.Board.find_by_id/1","type":"function"},{"doc":"Determines if the provided user_priority has read access to the Board with the specified id . If the user doesn't have read access to the parent of the specified Board , the user does not have read access to the Board either. DEVELOPER NOTE(akinsey): This method replaces Boards.getBoardInBoardMapping function from the node server. The previous naming convention was confusing as this is just checking read access to the board","ref":"EpochtalkServer.Models.Board.html#get_read_access_by_id/2","title":"EpochtalkServer.Models.Board.get_read_access_by_id/2","type":"function"},{"doc":"Determines if the provided user_priority has read access to the Board that contains the thread with the specified thread_id . If the user doesn't have read access to the parent of the specified Board , the user does not have read access to the Board either. DEVELOPER NOTE(akinsey): This method replaces Threads.getThreadsBoardInBoardMapping function from the node server. The previous naming convention was confusing as this is just checking read access to the board","ref":"EpochtalkServer.Models.Board.html#get_read_access_by_thread_id/2","title":"EpochtalkServer.Models.Board.get_read_access_by_thread_id/2","type":"function"},{"doc":"Determines if the provided user_priority has write access to the board with the specified id","ref":"EpochtalkServer.Models.Board.html#get_write_access_by_id/2","title":"EpochtalkServer.Models.Board.get_write_access_by_id/2","type":"function"},{"doc":"Determines if the provided user_priority has write access to the board that contains the thread the specified thread_id","ref":"EpochtalkServer.Models.Board.html#get_write_access_by_thread_id/2","title":"EpochtalkServer.Models.Board.get_write_access_by_thread_id/2","type":"function"},{"doc":"Fetches list of boards that authed User has priority to view. Used for Board movelist, a Thread moderation feature.","ref":"EpochtalkServer.Models.Board.html#movelist/1","title":"EpochtalkServer.Models.Board.movelist/1","type":"function"},{"doc":"Converts a board's slug to id","ref":"EpochtalkServer.Models.Board.html#slug_to_id/1","title":"EpochtalkServer.Models.Board.slug_to_id/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Board.html#t:t/0","title":"EpochtalkServer.Models.Board.t/0","type":"type"},{"doc":"BoardBan model, for performing actions relating a user's profile","ref":"EpochtalkServer.Models.BoardBan.html","title":"EpochtalkServer.Models.BoardBan","type":"module"},{"doc":"Creates a generic changeset for BoardBan model","ref":"EpochtalkServer.Models.BoardBan.html#changeset/2","title":"EpochtalkServer.Models.BoardBan.changeset/2","type":"function"},{"doc":"Used to check if User is banned from board. Accepts a board_id , post_id or thread_id as an option. Returns true if the user is banned from the specified Board or false otherwise.","ref":"EpochtalkServer.Models.BoardBan.html#is_banned_from_board/2","title":"EpochtalkServer.Models.BoardBan.is_banned_from_board/2","type":"function"},{"doc":"Used to check if User with specified user_id is not banned from board. Accepts a board_id , post_id or thread_id as an option. Returns true if the user is not banned from the specified Board or false otherwise.","ref":"EpochtalkServer.Models.BoardBan.html#is_not_banned_from_board/2","title":"EpochtalkServer.Models.BoardBan.is_not_banned_from_board/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.BoardBan.html#t:t/0","title":"EpochtalkServer.Models.BoardBan.t/0","type":"type"},{"doc":"BoardMapping model, for performing actions relating to mapping forum boards and categories","ref":"EpochtalkServer.Models.BoardMapping.html","title":"EpochtalkServer.Models.BoardMapping","type":"module"},{"doc":"Returns BoardMapping with loaded boards and relevant metadata","ref":"EpochtalkServer.Models.BoardMapping.html#all/1","title":"EpochtalkServer.Models.BoardMapping.all/1","type":"function"},{"doc":"Create generic changeset for BoardMapping model","ref":"EpochtalkServer.Models.BoardMapping.html#changeset/2","title":"EpochtalkServer.Models.BoardMapping.changeset/2","type":"function"},{"doc":"Deletes a Board from the BoardMapping","ref":"EpochtalkServer.Models.BoardMapping.html#delete_board_by_id/1","title":"EpochtalkServer.Models.BoardMapping.delete_board_by_id/1","type":"function"},{"doc":"Updates BoardMapping in the database","ref":"EpochtalkServer.Models.BoardMapping.html#update/1","title":"EpochtalkServer.Models.BoardMapping.update/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.BoardMapping.html#t:t/0","title":"EpochtalkServer.Models.BoardMapping.t/0","type":"type"},{"doc":"BoardModerator model, for performing actions relating to Board moderators","ref":"EpochtalkServer.Models.BoardModerator.html","title":"EpochtalkServer.Models.BoardModerator","type":"module"},{"doc":"Adds list of users to the list of moderators for a specific Board","ref":"EpochtalkServer.Models.BoardModerator.html#add_moderators_by_username/2","title":"EpochtalkServer.Models.BoardModerator.add_moderators_by_username/2","type":"function"},{"doc":"Query all BoardModerator models","ref":"EpochtalkServer.Models.BoardModerator.html#all/0","title":"EpochtalkServer.Models.BoardModerator.all/0","type":"function"},{"doc":"Create generic changeset for BoardModerator model","ref":"EpochtalkServer.Models.BoardModerator.html#changeset/2","title":"EpochtalkServer.Models.BoardModerator.changeset/2","type":"function"},{"doc":"Returns list containing zero or more board_id corresponding to a Board that the specified User moderates","ref":"EpochtalkServer.Models.BoardModerator.html#get_user_moderated_boards/1","title":"EpochtalkServer.Models.BoardModerator.get_user_moderated_boards/1","type":"function"},{"doc":"Removes list of users from the list of moderators for a specific Board","ref":"EpochtalkServer.Models.BoardModerator.html#remove_moderators_by_username/2","title":"EpochtalkServer.Models.BoardModerator.remove_moderators_by_username/2","type":"function"},{"doc":"Check if a specific User is moderator of a Board using a Board ID","ref":"EpochtalkServer.Models.BoardModerator.html#user_is_moderator/2","title":"EpochtalkServer.Models.BoardModerator.user_is_moderator/2","type":"function"},{"doc":"Check if a specific User is moderator of a Board using a Post ID","ref":"EpochtalkServer.Models.BoardModerator.html#user_is_moderator_with_post_id/2","title":"EpochtalkServer.Models.BoardModerator.user_is_moderator_with_post_id/2","type":"function"},{"doc":"Check if a specific User is moderator of a Board using a Thread ID","ref":"EpochtalkServer.Models.BoardModerator.html#user_is_moderator_with_thread_id/2","title":"EpochtalkServer.Models.BoardModerator.user_is_moderator_with_thread_id/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.BoardModerator.html#t:t/0","title":"EpochtalkServer.Models.BoardModerator.t/0","type":"type"},{"doc":"Category model, for performing actions relating to forum categories","ref":"EpochtalkServer.Models.Category.html","title":"EpochtalkServer.Models.Category","type":"module"},{"doc":"Returns a list of all categories","ref":"EpochtalkServer.Models.Category.html#all/0","title":"EpochtalkServer.Models.Category.all/0","type":"function"},{"doc":"Create generic changeset for Category model","ref":"EpochtalkServer.Models.Category.html#changeset/2","title":"EpochtalkServer.Models.Category.changeset/2","type":"function"},{"doc":"Creates a new Category in the database","ref":"EpochtalkServer.Models.Category.html#create/1","title":"EpochtalkServer.Models.Category.create/1","type":"function"},{"doc":"Creates changeset for inserting a new Category model","ref":"EpochtalkServer.Models.Category.html#create_changeset/2","title":"EpochtalkServer.Models.Category.create_changeset/2","type":"function"},{"doc":"Used to find a specific Category by it's id","ref":"EpochtalkServer.Models.Category.html#find_by_id/1","title":"EpochtalkServer.Models.Category.find_by_id/1","type":"function"},{"doc":"Updates an existing Category in the database, used by board mapping to recategorize boards","ref":"EpochtalkServer.Models.Category.html#update_for_board_mapping/1","title":"EpochtalkServer.Models.Category.update_for_board_mapping/1","type":"function"},{"doc":"Creates changeset for updating an existing Category model","ref":"EpochtalkServer.Models.Category.html#update_for_board_mapping_changeset/2","title":"EpochtalkServer.Models.Category.update_for_board_mapping_changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Category.html#t:t/0","title":"EpochtalkServer.Models.Category.t/0","type":"type"},{"doc":"Configuration model, for performing actions relating to frontend Configuration","ref":"EpochtalkServer.Models.Configuration.html","title":"EpochtalkServer.Models.Configuration","type":"module"},{"doc":"Gets a Configuration from the database by name","ref":"EpochtalkServer.Models.Configuration.html#by_name/1","title":"EpochtalkServer.Models.Configuration.by_name/1","type":"function"},{"doc":"Creates a new Configuration into the database","ref":"EpochtalkServer.Models.Configuration.html#create/1","title":"EpochtalkServer.Models.Configuration.create/1","type":"function"},{"doc":"Create changeset for creating a new Configuration model","ref":"EpochtalkServer.Models.Configuration.html#create_changeset/2","title":"EpochtalkServer.Models.Configuration.create_changeset/2","type":"function"},{"doc":"Gets default frontend Configuration from the database","ref":"EpochtalkServer.Models.Configuration.html#get_default/0","title":"EpochtalkServer.Models.Configuration.get_default/0","type":"function"},{"doc":"Inserts a default Configuration into the database given config_map","ref":"EpochtalkServer.Models.Configuration.html#set_default/1","title":"EpochtalkServer.Models.Configuration.set_default/1","type":"function"},{"doc":"Warms :epochtalk_server[:frontend_config] config variable using Configuration stored in database, if present. If there is no Configuration in the database, the default value is taken from :epochtalk_server[:frontend_config] and inserted into the database as the default Configuration . Run as a Task on application startup.","ref":"EpochtalkServer.Models.Configuration.html#warm_frontend_config/0","title":"EpochtalkServer.Models.Configuration.warm_frontend_config/0","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Configuration.html#t:t/0","title":"EpochtalkServer.Models.Configuration.t/0","type":"type"},{"doc":"Invitation model, for performing actions relating to inviting new users to the forum","ref":"EpochtalkServer.Models.Invitation.html","title":"EpochtalkServer.Models.Invitation","type":"module"},{"doc":"Creates a new Invitation in the database","ref":"EpochtalkServer.Models.Invitation.html#create/1","title":"EpochtalkServer.Models.Invitation.create/1","type":"function"},{"doc":"Create changeset for inserting a new Invitation model","ref":"EpochtalkServer.Models.Invitation.html#create_changeset/2","title":"EpochtalkServer.Models.Invitation.create_changeset/2","type":"function"},{"doc":"Deletes Invitation from the database by email","ref":"EpochtalkServer.Models.Invitation.html#delete/1","title":"EpochtalkServer.Models.Invitation.delete/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Invitation.html#t:t/0","title":"EpochtalkServer.Models.Invitation.t/0","type":"type"},{"doc":"Mention model, for performing actions relating to forum categories","ref":"EpochtalkServer.Models.Mention.html","title":"EpochtalkServer.Models.Mention","type":"module"},{"doc":"Fixes text search vector, since usernames are being converted to user ids before Post is created, the created Post will have the ids in the tsv field. To correct this we recreate the tsv field using the original Post body.","ref":"EpochtalkServer.Models.Mention.html#correct_text_search_vector/1","title":"EpochtalkServer.Models.Mention.correct_text_search_vector/1","type":"function"},{"doc":"Create a Mention if the mentioned User has permission to view Board they are being mentioned in.","ref":"EpochtalkServer.Models.Mention.html#create/1","title":"EpochtalkServer.Models.Mention.create/1","type":"function"},{"doc":"Create changeset for Mention model","ref":"EpochtalkServer.Models.Mention.html#create_changeset/2","title":"EpochtalkServer.Models.Mention.create_changeset/2","type":"function"},{"doc":"Delete specific Mention by id","ref":"EpochtalkServer.Models.Mention.html#delete/1","title":"EpochtalkServer.Models.Mention.delete/1","type":"function"},{"doc":"Delete all Mention for a specific User","ref":"EpochtalkServer.Models.Mention.html#delete_by_user_id/1","title":"EpochtalkServer.Models.Mention.delete_by_user_id/1","type":"function"},{"doc":"Handles logic tied to the creation of Mention . Performs the following actions: Checks that User has permission to create Mention Iterates though each mentioned User Checks that mentioned User is not ignoring the authenticated User Creates mentions Sends websocket notification Checks mention email settings Sends email to mentioned user if applicable","ref":"EpochtalkServer.Models.Mention.html#handle_user_mention_creation/3","title":"EpochtalkServer.Models.Mention.handle_user_mention_creation/3","type":"function"},{"doc":"Page Mention models by for a specific User Valid Options name type details :per_page non_neg_integer records per page to return :extended boolean returns board and post details with mention if true","ref":"EpochtalkServer.Models.Mention.html#page_by_user_id/3","title":"EpochtalkServer.Models.Mention.page_by_user_id/3","type":"function"},{"doc":"Iterates through list of Post , converts mentioned User id to a User usernames within the body of posts. Used when retreiving posts from the database","ref":"EpochtalkServer.Models.Mention.html#user_id_to_username/1","title":"EpochtalkServer.Models.Mention.user_id_to_username/1","type":"function"},{"doc":"Within Post , converts mentioned User usernames to a User ids within the body of posts. Used before storing Post in the database","ref":"EpochtalkServer.Models.Mention.html#username_to_user_id/2","title":"EpochtalkServer.Models.Mention.username_to_user_id/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Mention.html#t:t/0","title":"EpochtalkServer.Models.Mention.t/0","type":"type"},{"doc":"MentionIgnored model, for performing actions relating to forum categories","ref":"EpochtalkServer.Models.MentionIgnored.html","title":"EpochtalkServer.Models.MentionIgnored","type":"module"},{"doc":"Create a MentionIgnored","ref":"EpochtalkServer.Models.MentionIgnored.html#create/1","title":"EpochtalkServer.Models.MentionIgnored.create/1","type":"function"},{"doc":"Create changeset for MentionIgnored model","ref":"EpochtalkServer.Models.MentionIgnored.html#create_changeset/2","title":"EpochtalkServer.Models.MentionIgnored.create_changeset/2","type":"function"},{"doc":"Delete specific MentionIgnored . Unignores a single User","ref":"EpochtalkServer.Models.MentionIgnored.html#delete/2","title":"EpochtalkServer.Models.MentionIgnored.delete/2","type":"function"},{"doc":"Delete all MentionIgnored for a specific User . Unignores all for specified User","ref":"EpochtalkServer.Models.MentionIgnored.html#delete_by_user_id/1","title":"EpochtalkServer.Models.MentionIgnored.delete_by_user_id/1","type":"function"},{"doc":"Check MentionIgnored records to see if mentioned (ignored_user_id) User is ignoring the metioning (user_id) `User","ref":"EpochtalkServer.Models.MentionIgnored.html#is_user_ignored?/2","title":"EpochtalkServer.Models.MentionIgnored.is_user_ignored?/2","type":"function"},{"doc":"Page all users blocked from mentioning the specified User Valid Options name type details :per_page non_neg_integer records per page to return","ref":"EpochtalkServer.Models.MentionIgnored.html#page_by_user_id/3","title":"EpochtalkServer.Models.MentionIgnored.page_by_user_id/3","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.MentionIgnored.html#t:t/0","title":"EpochtalkServer.Models.MentionIgnored.t/0","type":"type"},{"doc":"MetadataBoard model, for performing actions relating to Board metadata","ref":"EpochtalkServer.Models.MetadataBoard.html","title":"EpochtalkServer.Models.MetadataBoard","type":"module"},{"doc":"Create changeset for inserting a new MetadataBoard model","ref":"EpochtalkServer.Models.MetadataBoard.html#changeset/2","title":"EpochtalkServer.Models.MetadataBoard.changeset/2","type":"function"},{"doc":"Inserts a new MetadataBoard into the database","ref":"EpochtalkServer.Models.MetadataBoard.html#insert/1","title":"EpochtalkServer.Models.MetadataBoard.insert/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.MetadataBoard.html#t:t/0","title":"EpochtalkServer.Models.MetadataBoard.t/0","type":"type"},{"doc":"MetadataThread model, for performing actions relating to Board metadata","ref":"EpochtalkServer.Models.MetadataThread.html","title":"EpochtalkServer.Models.MetadataThread","type":"module"},{"doc":"Create changeset for inserting a new MetadataThread model","ref":"EpochtalkServer.Models.MetadataThread.html#changeset/2","title":"EpochtalkServer.Models.MetadataThread.changeset/2","type":"function"},{"doc":"Increments a thread's view count by incrementing views field in associated MetadataThread model","ref":"EpochtalkServer.Models.MetadataThread.html#increment_view_count/1","title":"EpochtalkServer.Models.MetadataThread.increment_view_count/1","type":"function"},{"doc":"Inserts a new MetadataThread into the database","ref":"EpochtalkServer.Models.MetadataThread.html#insert/1","title":"EpochtalkServer.Models.MetadataThread.insert/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.MetadataThread.html#t:t/0","title":"EpochtalkServer.Models.MetadataThread.t/0","type":"type"},{"doc":"MetricRankMap model, for performing actions relating to MetricRankMap","ref":"EpochtalkServer.Models.MetricRankMap.html","title":"EpochtalkServer.Models.MetricRankMap","type":"module"},{"doc":"Query and merge all MetricRankMap models","ref":"EpochtalkServer.Models.MetricRankMap.html#all_merged/0","title":"EpochtalkServer.Models.MetricRankMap.all_merged/0","type":"function"},{"doc":"Generic changeset for MetricRankMap model","ref":"EpochtalkServer.Models.MetricRankMap.html#changeset/2","title":"EpochtalkServer.Models.MetricRankMap.changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.MetricRankMap.html#t:t/0","title":"EpochtalkServer.Models.MetricRankMap.t/0","type":"type"},{"doc":"ModerationLog model, for performing actions relating to the moderation log","ref":"EpochtalkServer.Models.ModerationLog.html","title":"EpochtalkServer.Models.ModerationLog","type":"module"},{"doc":"Creates a new ModerationLog in the database","ref":"EpochtalkServer.Models.ModerationLog.html#create/1","title":"EpochtalkServer.Models.ModerationLog.create/1","type":"function"},{"doc":"Create generic changeset for ModerationLog model","ref":"EpochtalkServer.Models.ModerationLog.html#create_changeset/2","title":"EpochtalkServer.Models.ModerationLog.create_changeset/2","type":"function"},{"doc":"Page ModerationLog models","ref":"EpochtalkServer.Models.ModerationLog.html#page/3","title":"EpochtalkServer.Models.ModerationLog.page/3","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.ModerationLog.html#t:t/0","title":"EpochtalkServer.Models.ModerationLog.t/0","type":"type"},{"doc":"Notification model, for performing actions relating to forum categories","ref":"EpochtalkServer.Models.Notification.html","title":"EpochtalkServer.Models.Notification","type":"module"},{"doc":"Returns Notification counts for a specific User by id , from the database. Used to display new message/mention notifications.","ref":"EpochtalkServer.Models.Notification.html#counts_by_user_id/2","title":"EpochtalkServer.Models.Notification.counts_by_user_id/2","type":"function"},{"doc":"Used to create a new Notification","ref":"EpochtalkServer.Models.Notification.html#create/1","title":"EpochtalkServer.Models.Notification.create/1","type":"function"},{"doc":"Create changeset for Notification model","ref":"EpochtalkServer.Models.Notification.html#create_changeset/2","title":"EpochtalkServer.Models.Notification.create_changeset/2","type":"function"},{"doc":"Dismisses specific Notification by id . Used to display clear a specific message/mention Notification .","ref":"EpochtalkServer.Models.Notification.html#dismiss/1","title":"EpochtalkServer.Models.Notification.dismiss/1","type":"function"},{"doc":"Dismisses Notification counts for a specific User by id . Used to display clear message/mention notifications.","ref":"EpochtalkServer.Models.Notification.html#dismiss_type_by_user_id/2","title":"EpochtalkServer.Models.Notification.dismiss_type_by_user_id/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Notification.html#t:t/0","title":"EpochtalkServer.Models.Notification.t/0","type":"type"},{"doc":"Permission model, for performing actions relating to Role permissions, used for seeding","ref":"EpochtalkServer.Models.Permission.html","title":"EpochtalkServer.Models.Permission","type":"module"},{"doc":"Returns every Permission record in the database","ref":"EpochtalkServer.Models.Permission.html#all/0","title":"EpochtalkServer.Models.Permission.all/0","type":"function"},{"doc":"Returns a specific Permission provided it's path","ref":"EpochtalkServer.Models.Permission.html#by_path/1","title":"EpochtalkServer.Models.Permission.by_path/1","type":"function"},{"doc":"Creates a generic changeset for Permission model","ref":"EpochtalkServer.Models.Permission.html#changeset/2","title":"EpochtalkServer.Models.Permission.changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Permission.html#t:t/0","title":"EpochtalkServer.Models.Permission.t/0","type":"type"},{"doc":"Poll model, for performing actions relating to Thread polls","ref":"EpochtalkServer.Models.Poll.html","title":"EpochtalkServer.Models.Poll","type":"module"},{"doc":"Queries Poll Data by thread","ref":"EpochtalkServer.Models.Poll.html#by_thread/1","title":"EpochtalkServer.Models.Poll.by_thread/1","type":"function"},{"doc":"Generic changeset for Poll model","ref":"EpochtalkServer.Models.Poll.html#changeset/2","title":"EpochtalkServer.Models.Poll.changeset/2","type":"function"},{"doc":"Creates a new Poll in the database","ref":"EpochtalkServer.Models.Poll.html#create/1","title":"EpochtalkServer.Models.Poll.create/1","type":"function"},{"doc":"Create changeset for Poll model","ref":"EpochtalkServer.Models.Poll.html#create_changeset/2","title":"EpochtalkServer.Models.Poll.create_changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Poll.html#t:t/0","title":"EpochtalkServer.Models.Poll.t/0","type":"type"},{"doc":"PollAnswer model, for performing actions relating to Poll answers","ref":"EpochtalkServer.Models.PollAnswer.html","title":"EpochtalkServer.Models.PollAnswer","type":"module"},{"doc":"Generic changeset for PollAnswer model","ref":"EpochtalkServer.Models.PollAnswer.html#changeset/2","title":"EpochtalkServer.Models.PollAnswer.changeset/2","type":"function"},{"doc":"Creates a new PollAnswer in the database","ref":"EpochtalkServer.Models.PollAnswer.html#create/1","title":"EpochtalkServer.Models.PollAnswer.create/1","type":"function"},{"doc":"Create changeset for PollAnswer model","ref":"EpochtalkServer.Models.PollAnswer.html#create_changeset/2","title":"EpochtalkServer.Models.PollAnswer.create_changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.PollAnswer.html#t:t/0","title":"EpochtalkServer.Models.PollAnswer.t/0","type":"type"},{"doc":"PollResponse model, for performing actions relating to Poll answers","ref":"EpochtalkServer.Models.PollResponse.html","title":"EpochtalkServer.Models.PollResponse","type":"module"},{"doc":"Generic changeset for PollResponse model","ref":"EpochtalkServer.Models.PollResponse.html#changeset/2","title":"EpochtalkServer.Models.PollResponse.changeset/2","type":"function"},{"doc":"Create changeset for PollResponse model","ref":"EpochtalkServer.Models.PollResponse.html#create_changeset/2","title":"EpochtalkServer.Models.PollResponse.create_changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.PollResponse.html#t:t/0","title":"EpochtalkServer.Models.PollResponse.t/0","type":"type"},{"doc":"Post model, for performing actions relating to forum posts","ref":"EpochtalkServer.Models.Post.html","title":"EpochtalkServer.Models.Post","type":"module"},{"doc":"Create generic changeset for Post model","ref":"EpochtalkServer.Models.Post.html#changeset/2","title":"EpochtalkServer.Models.Post.changeset/2","type":"function"},{"doc":"Get number of posts by a specific User between two dates, used for UserActivity algorithm.","ref":"EpochtalkServer.Models.Post.html#count_by_user_id_in_range/3","title":"EpochtalkServer.Models.Post.count_by_user_id_in_range/3","type":"function"},{"doc":"Creates a new Post in the database, used during Thread creation","ref":"EpochtalkServer.Models.Post.html#create/1","title":"EpochtalkServer.Models.Post.create/1","type":"function"},{"doc":"Creates a new Post in the database","ref":"EpochtalkServer.Models.Post.html#create/2","title":"EpochtalkServer.Models.Post.create/2","type":"function"},{"doc":"Create changeset for Post model","ref":"EpochtalkServer.Models.Post.html#create_changeset/2","title":"EpochtalkServer.Models.Post.create_changeset/2","type":"function"},{"doc":"Used to find a specific Post by it's id","ref":"EpochtalkServer.Models.Post.html#find_by_id/1","title":"EpochtalkServer.Models.Post.find_by_id/1","type":"function"},{"doc":"Used to correct the text search vector for post after being modified for mentions","ref":"EpochtalkServer.Models.Post.html#fix_text_search_vector/1","title":"EpochtalkServer.Models.Post.fix_text_search_vector/1","type":"function"},{"doc":"Paginates Post records for a given a Thread","ref":"EpochtalkServer.Models.Post.html#page_by_thread_id/3","title":"EpochtalkServer.Models.Post.page_by_thread_id/3","type":"function"},{"doc":"Sets the post_position of a new Post , by querying the post_count of the parent Thread and adding one","ref":"EpochtalkServer.Models.Post.html#set_position_using_thread/2","title":"EpochtalkServer.Models.Post.set_position_using_thread/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Post.html#t:t/0","title":"EpochtalkServer.Models.Post.t/0","type":"type"},{"doc":"Preference model, for performing actions relating to a user's preferences","ref":"EpochtalkServer.Models.Preference.html","title":"EpochtalkServer.Models.Preference","type":"module"},{"doc":"Fetches Preference associated with a specific User","ref":"EpochtalkServer.Models.Preference.html#by_user_id/1","title":"EpochtalkServer.Models.Preference.by_user_id/1","type":"function"},{"doc":"Creates Preference record for a specific User","ref":"EpochtalkServer.Models.Preference.html#create/2","title":"EpochtalkServer.Models.Preference.create/2","type":"function"},{"doc":"Creates a create changeset for Preference model","ref":"EpochtalkServer.Models.Preference.html#create_changeset/2","title":"EpochtalkServer.Models.Preference.create_changeset/2","type":"function"},{"doc":"Returns boolean indicating if specific User has email_mentions Preference set","ref":"EpochtalkServer.Models.Preference.html#email_mentions?/1","title":"EpochtalkServer.Models.Preference.email_mentions?/1","type":"function"},{"doc":"Returns boolean indicating if specific User has notify_replied_threads Preference set","ref":"EpochtalkServer.Models.Preference.html#notify_replied_threads?/1","title":"EpochtalkServer.Models.Preference.notify_replied_threads?/1","type":"function"},{"doc":"Enables Email Notifications ( email_mentions ) for Mention","ref":"EpochtalkServer.Models.Preference.html#toggle_email_mentions/2","title":"EpochtalkServer.Models.Preference.toggle_email_mentions/2","type":"function"},{"doc":"Enables Email Notifications ( notify_replied_threads ) for ThreadSubscription","ref":"EpochtalkServer.Models.Preference.html#toggle_notify_replied_threads/2","title":"EpochtalkServer.Models.Preference.toggle_notify_replied_threads/2","type":"function"},{"doc":"Creates an update changeset for Preference model","ref":"EpochtalkServer.Models.Preference.html#update_changeset/2","title":"EpochtalkServer.Models.Preference.update_changeset/2","type":"function"},{"doc":"Upserts Preference record for a specific User","ref":"EpochtalkServer.Models.Preference.html#upsert/2","title":"EpochtalkServer.Models.Preference.upsert/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Preference.html#t:t/0","title":"EpochtalkServer.Models.Preference.t/0","type":"type"},{"doc":"Profile model, for performing actions relating a user's profile","ref":"EpochtalkServer.Models.Profile.html","title":"EpochtalkServer.Models.Profile","type":"module"},{"doc":"Creates a changeset for Profile model","ref":"EpochtalkServer.Models.Profile.html#changeset/2","title":"EpochtalkServer.Models.Profile.changeset/2","type":"function"},{"doc":"Creates Profile record for a specific User","ref":"EpochtalkServer.Models.Profile.html#create/2","title":"EpochtalkServer.Models.Profile.create/2","type":"function"},{"doc":"Increments the post_count field given a User id","ref":"EpochtalkServer.Models.Profile.html#increment_post_count/1","title":"EpochtalkServer.Models.Profile.increment_post_count/1","type":"function"},{"doc":"Updates the last active date of a User if minutes have past since last update","ref":"EpochtalkServer.Models.Profile.html#maybe_update_last_active/1","title":"EpochtalkServer.Models.Profile.maybe_update_last_active/1","type":"function"},{"doc":"Upserts Profile record for a specific User","ref":"EpochtalkServer.Models.Profile.html#upsert/2","title":"EpochtalkServer.Models.Profile.upsert/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Profile.html#t:t/0","title":"EpochtalkServer.Models.Profile.t/0","type":"type"},{"doc":"Rank model, for performing actions relating to User Rank","ref":"EpochtalkServer.Models.Rank.html","title":"EpochtalkServer.Models.Rank","type":"module"},{"doc":"Query all Rank models","ref":"EpochtalkServer.Models.Rank.html#all/0","title":"EpochtalkServer.Models.Rank.all/0","type":"function"},{"doc":"Generic changeset for Rank model","ref":"EpochtalkServer.Models.Rank.html#changeset/2","title":"EpochtalkServer.Models.Rank.changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Rank.html#t:t/0","title":"EpochtalkServer.Models.Rank.t/0","type":"type"},{"doc":"Role model, for performing actions relating to user roles","ref":"EpochtalkServer.Models.Role.html","title":"EpochtalkServer.Models.Role","type":"module"},{"doc":"Uses role cache to returns every Role record","ref":"EpochtalkServer.Models.Role.html#all/0","title":"EpochtalkServer.Models.Role.all/0","type":"function"},{"doc":"Returns every Role record in the database WARNING: Only use for startup/seeding; use Role.all elsewhere","ref":"EpochtalkServer.Models.Role.html#all_repo/0","title":"EpochtalkServer.Models.Role.all_repo/0","type":"function"},{"doc":"Uses role cache to return Role or list of Role s for specified lookup(s)","ref":"EpochtalkServer.Models.Role.html#by_lookup/1","title":"EpochtalkServer.Models.Role.by_lookup/1","type":"function"},{"doc":"Returns a Role for specified lookup WARNING: Only used for startup/seeding; use Role.by_lookup elsewhere","ref":"EpochtalkServer.Models.Role.html#by_lookup_repo/1","title":"EpochtalkServer.Models.Role.by_lookup_repo/1","type":"function"},{"doc":"Returns a list containing a user's Role s","ref":"EpochtalkServer.Models.Role.html#by_user_id/1","title":"EpochtalkServer.Models.Role.by_user_id/1","type":"function"},{"doc":"Create generic changeset for the Role model","ref":"EpochtalkServer.Models.Role.html#changeset/2","title":"EpochtalkServer.Models.Role.changeset/2","type":"function"},{"doc":"Returns id for the banned Role","ref":"EpochtalkServer.Models.Role.html#get_banned_role_id/0","title":"EpochtalkServer.Models.Role.get_banned_role_id/0","type":"function"},{"doc":"Returns default Role , for base installation this is the user role, if :epochtalk_server[:frontend_config][&quot;newbie_enabled&quot;] configuration is set to true, then newbie is the default role.","ref":"EpochtalkServer.Models.Role.html#get_default/0","title":"EpochtalkServer.Models.Role.get_default/0","type":"function"},{"doc":"Returns default Role , for base installation this is the user role, if :epochtalk_server[:frontend_config][&quot;newbie_enabled&quot;] configuration is set to true, then newbie is the default role.","ref":"EpochtalkServer.Models.Role.html#get_default_unauthenticated/0","title":"EpochtalkServer.Models.Role.get_default_unauthenticated/0","type":"function"},{"doc":"Takes in list of user's roles, and returns an xored map of all Role permissions","ref":"EpochtalkServer.Models.Role.html#get_masked_permissions/1","title":"EpochtalkServer.Models.Role.get_masked_permissions/1","type":"function"},{"doc":"Returns id for the newbie Role","ref":"EpochtalkServer.Models.Role.html#get_newbie_role_id/0","title":"EpochtalkServer.Models.Role.get_newbie_role_id/0","type":"function"},{"doc":"The banned Role takes priority over all other roles If a User is banned, only return the banned Role This helper needs to be called anywhere that modifies a user's ban and is expected to return the updated user's roles.","ref":"EpochtalkServer.Models.Role.html#handle_banned_user_role/1","title":"EpochtalkServer.Models.Role.handle_banned_user_role/1","type":"function"},{"doc":"Default role is not stored in the database, in order to save space checks the role array on the user model if roles array is empty, sets the default role by appending it This helper needs to be called anywhere that modifies a user's roles and is expected to return the updated user's roles.","ref":"EpochtalkServer.Models.Role.html#handle_empty_user_roles/1","title":"EpochtalkServer.Models.Role.handle_empty_user_roles/1","type":"function"},{"doc":"Inserts a new Role into the database","ref":"EpochtalkServer.Models.Role.html#insert/1","title":"EpochtalkServer.Models.Role.insert/1","type":"function"},{"doc":"Updates the permissions of an existing Role in the database and reloads role cache","ref":"EpochtalkServer.Models.Role.html#set_permissions/2","title":"EpochtalkServer.Models.Role.set_permissions/2","type":"function"},{"doc":"Updates the priority_restrictions of an existing Role in the database and reloads role cache","ref":"EpochtalkServer.Models.Role.html#set_priority_restrictions/2","title":"EpochtalkServer.Models.Role.set_priority_restrictions/2","type":"function"},{"doc":"Updates an existing Role in the database and reloads role cache","ref":"EpochtalkServer.Models.Role.html#update/1","title":"EpochtalkServer.Models.Role.update/1","type":"function"},{"doc":"Create a changeset for updating a Role permissions and priority restrictions are not included in this changeset","ref":"EpochtalkServer.Models.Role.html#update_changeset/2","title":"EpochtalkServer.Models.Role.update_changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Role.html#t:t/0","title":"EpochtalkServer.Models.Role.t/0","type":"type"},{"doc":"RolePermission model, for performing actions relating to a roles permissions","ref":"EpochtalkServer.Models.RolePermission.html","title":"EpochtalkServer.Models.RolePermission","type":"module"},{"doc":"Creates a generic changeset for RolePermission model","ref":"EpochtalkServer.Models.RolePermission.html#changeset/2","title":"EpochtalkServer.Models.RolePermission.changeset/2","type":"function"},{"doc":"Inserts a new RolePermission into the database","ref":"EpochtalkServer.Models.RolePermission.html#insert/1","title":"EpochtalkServer.Models.RolePermission.insert/1","type":"function"},{"doc":"Sets all roles permissions to value: false, modified: false For server-side role-loading use, only runs if roles permissions table is currently empty","ref":"EpochtalkServer.Models.RolePermission.html#maybe_init!/0","title":"EpochtalkServer.Models.RolePermission.maybe_init!/0","type":"function"},{"doc":"For admin api use. Updates the modified value of RolePermission s for a Role and updates the Role 's permissions and priority restrictions If a permission is not included in new_permissions , it will be set to false . new_permissions may be an empty list - in which case, all permissions will be set to false . Any permissions in new_permissions which are not valid will be ignored.","ref":"EpochtalkServer.Models.RolePermission.html#modify_by_role/1","title":"EpochtalkServer.Models.RolePermission.modify_by_role/1","type":"function"},{"doc":"Derives a single nested map of all permissions for a role","ref":"EpochtalkServer.Models.RolePermission.html#permissions_map_by_role_id/1","title":"EpochtalkServer.Models.RolePermission.permissions_map_by_role_id/1","type":"function"},{"doc":"Used to update the value of a RolePermission in the database, if it exists or create it, if it doesnt","ref":"EpochtalkServer.Models.RolePermission.html#upsert_value/1","title":"EpochtalkServer.Models.RolePermission.upsert_value/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.RolePermission.html#t:t/0","title":"EpochtalkServer.Models.RolePermission.t/0","type":"type"},{"doc":"RoleUser model, for performing actions relating a setting a Role for a User","ref":"EpochtalkServer.Models.RoleUser.html","title":"EpochtalkServer.Models.RoleUser","type":"module"},{"doc":"Creates a generic changeset for RoleUser model","ref":"EpochtalkServer.Models.RoleUser.html#changeset/2","title":"EpochtalkServer.Models.RoleUser.changeset/2","type":"function"},{"doc":"Removes specified Role from specified User","ref":"EpochtalkServer.Models.RoleUser.html#delete/2","title":"EpochtalkServer.Models.RoleUser.delete/2","type":"function"},{"doc":"Removes banned Role from specified User","ref":"EpochtalkServer.Models.RoleUser.html#delete_banned/1","title":"EpochtalkServer.Models.RoleUser.delete_banned/1","type":"function"},{"doc":"Removes newbie Role from specified User","ref":"EpochtalkServer.Models.RoleUser.html#delete_newbie/1","title":"EpochtalkServer.Models.RoleUser.delete_newbie/1","type":"function"},{"doc":"Assigns a specific User to have the superAdministrator Role","ref":"EpochtalkServer.Models.RoleUser.html#set_admin/1","title":"EpochtalkServer.Models.RoleUser.set_admin/1","type":"function"},{"doc":"Assigns a specific User to have the specified Role","ref":"EpochtalkServer.Models.RoleUser.html#set_user_role/2","title":"EpochtalkServer.Models.RoleUser.set_user_role/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.RoleUser.html#t:t/0","title":"EpochtalkServer.Models.RoleUser.t/0","type":"type"},{"doc":"Thread model, for performing actions relating to forum threads","ref":"EpochtalkServer.Models.Thread.html","title":"EpochtalkServer.Models.Thread","type":"module"},{"doc":"Used to obtain breadcrumb data for a specific Thread given it's slug","ref":"EpochtalkServer.Models.Thread.html#breadcrumb/1","title":"EpochtalkServer.Models.Thread.breadcrumb/1","type":"function"},{"doc":"Create generic changeset for Thread model","ref":"EpochtalkServer.Models.Thread.html#changeset/2","title":"EpochtalkServer.Models.Thread.changeset/2","type":"function"},{"doc":"Creates a new Thread in the database","ref":"EpochtalkServer.Models.Thread.html#create/2","title":"EpochtalkServer.Models.Thread.create/2","type":"function"},{"doc":"Create changeset for creation of Thread model","ref":"EpochtalkServer.Models.Thread.html#create_changeset/2","title":"EpochtalkServer.Models.Thread.create_changeset/2","type":"function"},{"doc":"Returns a specific Thread given a valid id or slug","ref":"EpochtalkServer.Models.Thread.html#find/1","title":"EpochtalkServer.Models.Thread.find/1","type":"function"},{"doc":"Used to get first Post data given a Thread id","ref":"EpochtalkServer.Models.Thread.html#get_first_post_data_by_id/1","title":"EpochtalkServer.Models.Thread.get_first_post_data_by_id/1","type":"function"},{"doc":"Used to get first Post data given a Thread slug","ref":"EpochtalkServer.Models.Thread.html#get_first_post_data_by_slug/1","title":"EpochtalkServer.Models.Thread.get_first_post_data_by_slug/1","type":"function"},{"doc":"Increments the post_count field given a Thread id","ref":"EpochtalkServer.Models.Thread.html#increment_post_count/1","title":"EpochtalkServer.Models.Thread.increment_post_count/1","type":"function"},{"doc":"Returns boolean indicating if Thread is locked or nil if it does not exist","ref":"EpochtalkServer.Models.Thread.html#is_locked/1","title":"EpochtalkServer.Models.Thread.is_locked/1","type":"function"},{"doc":"Check if specific Thread is self moderated by a specific User","ref":"EpochtalkServer.Models.Thread.html#is_self_moderated_by_user/2","title":"EpochtalkServer.Models.Thread.is_self_moderated_by_user/2","type":"function"},{"doc":"Check if specific Thread , using a post_id , is self moderated by a specific User","ref":"EpochtalkServer.Models.Thread.html#is_self_moderated_by_user_with_post_id/2","title":"EpochtalkServer.Models.Thread.is_self_moderated_by_user_with_post_id/2","type":"function"},{"doc":"Returns paged threads by Board given a board_id","ref":"EpochtalkServer.Models.Thread.html#page_by_board_id/3","title":"EpochtalkServer.Models.Thread.page_by_board_id/3","type":"function"},{"doc":"Returns recent threads accounting for user priority and user's ignored boards","ref":"EpochtalkServer.Models.Thread.html#recent/3","title":"EpochtalkServer.Models.Thread.recent/3","type":"function"},{"doc":"Sets the created_at and updated_at of a new Thread by querying it's posts.","ref":"EpochtalkServer.Models.Thread.html#set_timestamps/1","title":"EpochtalkServer.Models.Thread.set_timestamps/1","type":"function"},{"doc":"Convert Thread slug to id","ref":"EpochtalkServer.Models.Thread.html#slug_to_id/1","title":"EpochtalkServer.Models.Thread.slug_to_id/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Thread.html#t:t/0","title":"EpochtalkServer.Models.Thread.t/0","type":"type"},{"doc":"ThreadSubscription model, for performing actions relating to ThreadSubscription","ref":"EpochtalkServer.Models.ThreadSubscription.html","title":"EpochtalkServer.Models.ThreadSubscription","type":"module"},{"doc":"Create ThreadSubscription in the database. First checks if the User has Preference notify_replied_threads set.","ref":"EpochtalkServer.Models.ThreadSubscription.html#create/2","title":"EpochtalkServer.Models.ThreadSubscription.create/2","type":"function"},{"doc":"Create changeset for ThreadSubscription model","ref":"EpochtalkServer.Models.ThreadSubscription.html#create_changeset/2","title":"EpochtalkServer.Models.ThreadSubscription.create_changeset/2","type":"function"},{"doc":"Deletes a specific ThreadSubscription record from the database.","ref":"EpochtalkServer.Models.ThreadSubscription.html#delete/2","title":"EpochtalkServer.Models.ThreadSubscription.delete/2","type":"function"},{"doc":"Deletes all ThreadSubscription records for a specific User from the database.","ref":"EpochtalkServer.Models.ThreadSubscription.html#delete_all/1","title":"EpochtalkServer.Models.ThreadSubscription.delete_all/1","type":"function"},{"doc":"Emails all subscribers of a particular Thread when there are new replies","ref":"EpochtalkServer.Models.ThreadSubscription.html#email_subscribers/2","title":"EpochtalkServer.Models.ThreadSubscription.email_subscribers/2","type":"function"},{"doc":"Get all Thread subscriber's User data for emailing","ref":"EpochtalkServer.Models.ThreadSubscription.html#get_subscriber_email_data/2","title":"EpochtalkServer.Models.ThreadSubscription.get_subscriber_email_data/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.ThreadSubscription.html#t:t/0","title":"EpochtalkServer.Models.ThreadSubscription.t/0","type":"type"},{"doc":"Trust model, for performing actions relating to Trust Each User has a list of users who they directly Trust Data structure represents who each User trusts directly, the function trust_by_user_ids ties this together by recursively checking users in that trust list","ref":"EpochtalkServer.Models.Trust.html","title":"EpochtalkServer.Models.Trust","type":"module"},{"doc":"Generic changeset for Trust model","ref":"EpochtalkServer.Models.Trust.html#changeset/2","title":"EpochtalkServer.Models.Trust.changeset/2","type":"function"},{"doc":"Appends Trust statistics to each Post in list if provided with a valid authenticated User","ref":"EpochtalkServer.Models.Trust.html#maybe_append_trust_stats_to_posts/2","title":"EpochtalkServer.Models.Trust.maybe_append_trust_stats_to_posts/2","type":"function"},{"doc":"Appends trust_visible field to Thread if provided with a valid authenticated User","ref":"EpochtalkServer.Models.Trust.html#maybe_append_trust_visible_to_thread/2","title":"EpochtalkServer.Models.Trust.maybe_append_trust_visible_to_thread/2","type":"function"},{"doc":"Determines the set of users in a user's Trust network, max_depth is configured by the user. Algorithm Description: Starts with current users trust list, or DefaultTrustList's if user does not have one Iterates recursively through trust list up to max_depth , updates their scores based on whether they are trusted or not Returns all users who have a positive score (trusted sources)","ref":"EpochtalkServer.Models.Trust.html#sources_by_user_id/3","title":"EpochtalkServer.Models.Trust.sources_by_user_id/3","type":"function"},{"doc":"Query all Trust models","ref":"EpochtalkServer.Models.Trust.html#trust_by_user_ids/1","title":"EpochtalkServer.Models.Trust.trust_by_user_ids/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Trust.html#t:t/0","title":"EpochtalkServer.Models.Trust.t/0","type":"type"},{"doc":"TrustBoard model, for performing actions relating to TrustBoard","ref":"EpochtalkServer.Models.TrustBoard.html","title":"EpochtalkServer.Models.TrustBoard","type":"module"},{"doc":"Query all TrustBoard models","ref":"EpochtalkServer.Models.TrustBoard.html#all/0","title":"EpochtalkServer.Models.TrustBoard.all/0","type":"function"},{"doc":"Generic changeset for TrustBoard model","ref":"EpochtalkServer.Models.TrustBoard.html#changeset/2","title":"EpochtalkServer.Models.TrustBoard.changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.TrustBoard.html#t:t/0","title":"EpochtalkServer.Models.TrustBoard.t/0","type":"type"},{"doc":"TrustFeedback model, for performing actions relating to TrustFeedback","ref":"EpochtalkServer.Models.TrustFeedback.html","title":"EpochtalkServer.Models.TrustFeedback","type":"module"},{"doc":"Used to calculate the user's Trust score when that User has no negative TrustFeedback","ref":"EpochtalkServer.Models.TrustFeedback.html#calculate_score_when_no_negative_feedback/2","title":"EpochtalkServer.Models.TrustFeedback.calculate_score_when_no_negative_feedback/2","type":"function"},{"doc":"Generic changeset for TrustFeedback model","ref":"EpochtalkServer.Models.TrustFeedback.html#changeset/2","title":"EpochtalkServer.Models.TrustFeedback.changeset/2","type":"function"},{"doc":"Get count of postivie or negative TrustFeedback a specific User and trust network (array of User IDs)","ref":"EpochtalkServer.Models.TrustFeedback.html#counts_by_user_id/4","title":"EpochtalkServer.Models.TrustFeedback.counts_by_user_id/4","type":"function"},{"doc":"Get created_at timestamp of the first negative TrustFeedback left for a specific User and trust network (array of User IDs)","ref":"EpochtalkServer.Models.TrustFeedback.html#first_negative_feedback_timestamp_by_user_id/2","title":"EpochtalkServer.Models.TrustFeedback.first_negative_feedback_timestamp_by_user_id/2","type":"function"},{"doc":"Calculates Trust statistics using TrustFeedback left for a specific User and the authenticated users trust network (array of User IDs)","ref":"EpochtalkServer.Models.TrustFeedback.html#statistics_by_user_id/3","title":"EpochtalkServer.Models.TrustFeedback.statistics_by_user_id/3","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.TrustFeedback.html#t:t/0","title":"EpochtalkServer.Models.TrustFeedback.t/0","type":"type"},{"doc":"TrustMaxDepth model, for performing actions relating to TrustMaxDepth","ref":"EpochtalkServer.Models.TrustMaxDepth.html","title":"EpochtalkServer.Models.TrustMaxDepth","type":"module"},{"doc":"Gets max_depth record for a specific User , defaults to max_depth of 2 if User doesn't have max_depth set or if the it is outside the range 0-4","ref":"EpochtalkServer.Models.TrustMaxDepth.html#by_user_id/1","title":"EpochtalkServer.Models.TrustMaxDepth.by_user_id/1","type":"function"},{"doc":"Generic changeset for TrustMaxDepth model","ref":"EpochtalkServer.Models.TrustMaxDepth.html#changeset/2","title":"EpochtalkServer.Models.TrustMaxDepth.changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.TrustMaxDepth.html#t:t/0","title":"EpochtalkServer.Models.TrustMaxDepth.t/0","type":"type"},{"doc":"User model, for performing actions relating a user","ref":"EpochtalkServer.Models.User.html","title":"EpochtalkServer.Models.User","type":"module"},{"doc":"Gets a User from the database by id","ref":"EpochtalkServer.Models.User.html#by_id/1","title":"EpochtalkServer.Models.User.by_id/1","type":"function"},{"doc":"Gets a User by username , from the database, with all of it's associations preloaded. Appends the user Role to user.roles if no roles present. Strips all roles but banned from user.roles if user is banned.","ref":"EpochtalkServer.Models.User.html#by_username/1","title":"EpochtalkServer.Models.User.by_username/1","type":"function"},{"doc":"Gets users by username, only returns id , username and roles","ref":"EpochtalkServer.Models.User.html#by_usernames/1","title":"EpochtalkServer.Models.User.by_usernames/1","type":"function"},{"doc":"Clears the malicious score of a User by id , from the database","ref":"EpochtalkServer.Models.User.html#clear_malicious_score_by_id/1","title":"EpochtalkServer.Models.User.clear_malicious_score_by_id/1","type":"function"},{"doc":"Creates a new User in the database, used for registration","ref":"EpochtalkServer.Models.User.html#create/1","title":"EpochtalkServer.Models.User.create/1","type":"function"},{"doc":"Creates a new User in the database and assigns the superAdministrator Role , used for seeding","ref":"EpochtalkServer.Models.User.html#create/2","title":"EpochtalkServer.Models.User.create/2","type":"function"},{"doc":"Gets a User email from the database by id","ref":"EpochtalkServer.Models.User.html#email_by_id/1","title":"EpochtalkServer.Models.User.email_by_id/1","type":"function"},{"doc":"Gets id of DefaultTrustList User from the database","ref":"EpochtalkServer.Models.User.html#get_default_trust_user_id/0","title":"EpochtalkServer.Models.User.get_default_trust_user_id/0","type":"function"},{"doc":"Checks if the provided User is malicious using the provided ip . If the User is found to be malicious after checking BannedAddress records, the user's malicious_score is updated and is assigned the banned Role , in the database and in place. Otherwise the user is just returned with no change.","ref":"EpochtalkServer.Models.User.html#handle_malicious_user/2","title":"EpochtalkServer.Models.User.handle_malicious_user/2","type":"function"},{"doc":"Gets list of User ids given a list of usernames.","ref":"EpochtalkServer.Models.User.html#ids_from_usernames/1","title":"EpochtalkServer.Models.User.ids_from_usernames/1","type":"function"},{"doc":"Returns boolean indicating if User account is deleted","ref":"EpochtalkServer.Models.User.html#is_active?/1","title":"EpochtalkServer.Models.User.is_active?/1","type":"function"},{"doc":"Check if confirmation_token is a match for User If it is a match, return true and delete confirmation_token from User Otherwise, return false","ref":"EpochtalkServer.Models.User.html#maybe_confirm?/2","title":"EpochtalkServer.Models.User.maybe_confirm?/2","type":"function"},{"doc":"Creates a registration changeset for User model, returns an error changeset if validation of username, email and password do not pass.","ref":"EpochtalkServer.Models.User.html#registration_changeset/2","title":"EpochtalkServer.Models.User.registration_changeset/2","type":"function"},{"doc":"Gets a User username from the database by id","ref":"EpochtalkServer.Models.User.html#username_by_id/1","title":"EpochtalkServer.Models.User.username_by_id/1","type":"function"},{"doc":"Validates with Argon2 that a User passhash matches the supplied password","ref":"EpochtalkServer.Models.User.html#valid_password?/2","title":"EpochtalkServer.Models.User.valid_password?/2","type":"function"},{"doc":"Checks if User with email exists in the database","ref":"EpochtalkServer.Models.User.html#with_email_exists?/1","title":"EpochtalkServer.Models.User.with_email_exists?/1","type":"function"},{"doc":"Checks if User with username exists in the database","ref":"EpochtalkServer.Models.User.html#with_username_exists?/1","title":"EpochtalkServer.Models.User.with_username_exists?/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.User.html#t:t/0","title":"EpochtalkServer.Models.User.t/0","type":"type"},{"doc":"UserActivity model, for performing actions relating to UserActivity","ref":"EpochtalkServer.Models.UserActivity.html","title":"EpochtalkServer.Models.UserActivity","type":"module"},{"doc":"Appends UserActivity data to list of Post","ref":"EpochtalkServer.Models.UserActivity.html#append_user_activity_to_posts/1","title":"EpochtalkServer.Models.UserActivity.append_user_activity_to_posts/1","type":"function"},{"doc":"Used to get the UserActivity for a specific User","ref":"EpochtalkServer.Models.UserActivity.html#get_by_user_id/1","title":"EpochtalkServer.Models.UserActivity.get_by_user_id/1","type":"function"},{"doc":"Updates UserActivity using the following algorithm Is current_period_start null, if so populate current_period_start and current_period_offset with user registration date check if current date is past (current_period_start + 14) if so update current_period_start and remaining_period_activity set to 14 and set current_period_offset to match start query remaining_period_activity if 0 then return else move to step 4 algorithm current_period_offset - (current_period_start + 14 days) postsFound = (Query posts between this time for user) if (postsFound &gt;= remaining_period_activity) { total_activity += remaining_period_activity; remaining_period_activity = 0; } else { total_activity += postsFound; remaining_period_activity = remaining_period_activity - postsFound; } update total_activity, remaining_period_activity current_period_offset","ref":"EpochtalkServer.Models.UserActivity.html#update/1","title":"EpochtalkServer.Models.UserActivity.update/1","type":"function"},{"doc":"Used to update UserActivity upon creating a Post or Thread . Removes newbie Role from User if activity reaches 30 or greater. Sends websocket notification to reauthenticate User after Role is removed.","ref":"EpochtalkServer.Models.UserActivity.html#update_user_activity/1","title":"EpochtalkServer.Models.UserActivity.update_user_activity/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.UserActivity.html#t:t/0","title":"EpochtalkServer.Models.UserActivity.t/0","type":"type"},{"doc":"UserIgnored model, for performing actions relating to UserIgnored","ref":"EpochtalkServer.Models.UserIgnored.html","title":"EpochtalkServer.Models.UserIgnored","type":"module"},{"doc":"Appends UserIgnored data to list of Post","ref":"EpochtalkServer.Models.UserIgnored.html#append_user_ignored_data_to_posts/2","title":"EpochtalkServer.Models.UserIgnored.append_user_ignored_data_to_posts/2","type":"function"},{"doc":"Used to get UserIgnored data for a specific User on a list of user_id","ref":"EpochtalkServer.Models.UserIgnored.html#by_user_ids/2","title":"EpochtalkServer.Models.UserIgnored.by_user_ids/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.UserIgnored.html#t:t/0","title":"EpochtalkServer.Models.UserIgnored.t/0","type":"type"},{"doc":"UserIp model, for performing actions relating to tracking a User IP addresses","ref":"EpochtalkServer.Models.UserIp.html","title":"EpochtalkServer.Models.UserIp","type":"module"},{"doc":"Inserts UserIp record into the database if it doesn't already exist","ref":"EpochtalkServer.Models.UserIp.html#maybe_track/2","title":"EpochtalkServer.Models.UserIp.maybe_track/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.UserIp.html#t:t/0","title":"EpochtalkServer.Models.UserIp.t/0","type":"type"},{"doc":"UserThreadView model, for performing actions relating to UserThreadView","ref":"EpochtalkServer.Models.UserThreadView.html","title":"EpochtalkServer.Models.UserThreadView","type":"module"},{"doc":"Used to upsert a UserThreadView . Used to update time field everytime User views a specific Thread","ref":"EpochtalkServer.Models.UserThreadView.html#upsert/2","title":"EpochtalkServer.Models.UserThreadView.upsert/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.UserThreadView.html#t:t/0","title":"EpochtalkServer.Models.UserThreadView.t/0","type":"type"},{"doc":"WatchBoard model, for performing actions relating to WatchBoard","ref":"EpochtalkServer.Models.WatchBoard.html","title":"EpochtalkServer.Models.WatchBoard","type":"module"},{"doc":"Creates a new WatchBoard record in the database. Used to assign a User to watch a particular Thread . Won't recreate record if it exists, will just return existing values.","ref":"EpochtalkServer.Models.WatchBoard.html#create/2","title":"EpochtalkServer.Models.WatchBoard.create/2","type":"function"},{"doc":"Create changeset for WatchBoard model","ref":"EpochtalkServer.Models.WatchBoard.html#create_changeset/2","title":"EpochtalkServer.Models.WatchBoard.create_changeset/2","type":"function"},{"doc":"Deletes a specific WatchBoard record from the database. Used to stop watching a Thread","ref":"EpochtalkServer.Models.WatchBoard.html#delete/2","title":"EpochtalkServer.Models.WatchBoard.delete/2","type":"function"},{"doc":"Given a User model and board_id returns if the User is watching the specified Thread","ref":"EpochtalkServer.Models.WatchBoard.html#is_watching/2","title":"EpochtalkServer.Models.WatchBoard.is_watching/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.WatchBoard.html#t:t/0","title":"EpochtalkServer.Models.WatchBoard.t/0","type":"type"},{"doc":"WatchThread model, for performing actions relating to WatchThread","ref":"EpochtalkServer.Models.WatchThread.html","title":"EpochtalkServer.Models.WatchThread","type":"module"},{"doc":"Creates a new WatchThread record in the database. Used to assign a User to watch a particular Thread . Won't recreate record if it exists, will just return existing values.","ref":"EpochtalkServer.Models.WatchThread.html#create/2","title":"EpochtalkServer.Models.WatchThread.create/2","type":"function"},{"doc":"Create changeset for WatchThread model","ref":"EpochtalkServer.Models.WatchThread.html#create_changeset/2","title":"EpochtalkServer.Models.WatchThread.create_changeset/2","type":"function"},{"doc":"Deletes a specific WatchThread record from the database. Used to stop watching a Thread","ref":"EpochtalkServer.Models.WatchThread.html#delete/2","title":"EpochtalkServer.Models.WatchThread.delete/2","type":"function"},{"doc":"Given a User model and thread_id returns if the User is watching the specified Thread","ref":"EpochtalkServer.Models.WatchThread.html#is_watching/2","title":"EpochtalkServer.Models.WatchThread.is_watching/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.WatchThread.html#t:t/0","title":"EpochtalkServer.Models.WatchThread.t/0","type":"type"},{"doc":"Consolidated source for hard-coded regex patterns","ref":"EpochtalkServer.Regex.html","title":"EpochtalkServer.Regex","type":"module"},{"doc":"Given a pattern specification atom Returns regex pattern or nil if pattern does not exist","ref":"EpochtalkServer.Regex.html#pattern/1","title":"EpochtalkServer.Regex.pattern/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Repo.html","title":"EpochtalkServer.Repo","type":"module"},{"doc":"Callback implementation for Ecto.Repo.aggregate/3 .","ref":"EpochtalkServer.Repo.html#aggregate/3","title":"EpochtalkServer.Repo.aggregate/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.aggregate/4 .","ref":"EpochtalkServer.Repo.html#aggregate/4","title":"EpochtalkServer.Repo.aggregate/4","type":"function"},{"doc":"Callback implementation for Ecto.Repo.all/2 .","ref":"EpochtalkServer.Repo.html#all/2","title":"EpochtalkServer.Repo.all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checked_out?/0 .","ref":"EpochtalkServer.Repo.html#checked_out?/0","title":"EpochtalkServer.Repo.checked_out?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checkout/2 .","ref":"EpochtalkServer.Repo.html#checkout/2","title":"EpochtalkServer.Repo.checkout/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Repo.html#child_spec/1","title":"EpochtalkServer.Repo.child_spec/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.config/0 .","ref":"EpochtalkServer.Repo.html#config/0","title":"EpochtalkServer.Repo.config/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.default_options/1 .","ref":"EpochtalkServer.Repo.html#default_options/1","title":"EpochtalkServer.Repo.default_options/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete/2 .","ref":"EpochtalkServer.Repo.html#delete/2","title":"EpochtalkServer.Repo.delete/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete!/2 .","ref":"EpochtalkServer.Repo.html#delete!/2","title":"EpochtalkServer.Repo.delete!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete_all/2 .","ref":"EpochtalkServer.Repo.html#delete_all/2","title":"EpochtalkServer.Repo.delete_all/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that forces all connections in the pool to disconnect within the given interval. See Ecto.Adapters.SQL.disconnect_all/3 for more information.","ref":"EpochtalkServer.Repo.html#disconnect_all/2","title":"EpochtalkServer.Repo.disconnect_all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.exists?/2 .","ref":"EpochtalkServer.Repo.html#exists?/2","title":"EpochtalkServer.Repo.exists?/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar depending on the adapter to obtain statistics for the given query. See Ecto.Adapters.SQL.explain/4 for more information.","ref":"EpochtalkServer.Repo.html#explain/3","title":"EpochtalkServer.Repo.explain/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get/3 .","ref":"EpochtalkServer.Repo.html#get/3","title":"EpochtalkServer.Repo.get/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get!/3 .","ref":"EpochtalkServer.Repo.html#get!/3","title":"EpochtalkServer.Repo.get!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by/3 .","ref":"EpochtalkServer.Repo.html#get_by/3","title":"EpochtalkServer.Repo.get_by/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by!/3 .","ref":"EpochtalkServer.Repo.html#get_by!/3","title":"EpochtalkServer.Repo.get_by!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_dynamic_repo/0 .","ref":"EpochtalkServer.Repo.html#get_dynamic_repo/0","title":"EpochtalkServer.Repo.get_dynamic_repo/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.in_transaction?/0 .","ref":"EpochtalkServer.Repo.html#in_transaction?/0","title":"EpochtalkServer.Repo.in_transaction?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert/2 .","ref":"EpochtalkServer.Repo.html#insert/2","title":"EpochtalkServer.Repo.insert/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert!/2 .","ref":"EpochtalkServer.Repo.html#insert!/2","title":"EpochtalkServer.Repo.insert!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_all/3 .","ref":"EpochtalkServer.Repo.html#insert_all/3","title":"EpochtalkServer.Repo.insert_all/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update/2 .","ref":"EpochtalkServer.Repo.html#insert_or_update/2","title":"EpochtalkServer.Repo.insert_or_update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update!/2 .","ref":"EpochtalkServer.Repo.html#insert_or_update!/2","title":"EpochtalkServer.Repo.insert_or_update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.load/2 .","ref":"EpochtalkServer.Repo.html#load/2","title":"EpochtalkServer.Repo.load/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one/2 .","ref":"EpochtalkServer.Repo.html#one/2","title":"EpochtalkServer.Repo.one/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one!/2 .","ref":"EpochtalkServer.Repo.html#one!/2","title":"EpochtalkServer.Repo.one!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.preload/3 .","ref":"EpochtalkServer.Repo.html#preload/3","title":"EpochtalkServer.Repo.preload/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.prepare_query/3 .","ref":"EpochtalkServer.Repo.html#prepare_query/3","title":"EpochtalkServer.Repo.prepare_query/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.put_dynamic_repo/1 .","ref":"EpochtalkServer.Repo.html#put_dynamic_repo/1","title":"EpochtalkServer.Repo.put_dynamic_repo/1","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/4 for more information.","ref":"EpochtalkServer.Repo.html#query/3","title":"EpochtalkServer.Repo.query/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query!/4 for more information.","ref":"EpochtalkServer.Repo.html#query!/3","title":"EpochtalkServer.Repo.query!/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many/4 for more information.","ref":"EpochtalkServer.Repo.html#query_many/3","title":"EpochtalkServer.Repo.query_many/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many!/4 for more information.","ref":"EpochtalkServer.Repo.html#query_many!/3","title":"EpochtalkServer.Repo.query_many!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload/2 .","ref":"EpochtalkServer.Repo.html#reload/2","title":"EpochtalkServer.Repo.reload/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload!/2 .","ref":"EpochtalkServer.Repo.html#reload!/2","title":"EpochtalkServer.Repo.reload!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.rollback/1 .","ref":"EpochtalkServer.Repo.html#rollback/1","title":"EpochtalkServer.Repo.rollback/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.start_link/1 .","ref":"EpochtalkServer.Repo.html#start_link/1","title":"EpochtalkServer.Repo.start_link/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stop/1 .","ref":"EpochtalkServer.Repo.html#stop/1","title":"EpochtalkServer.Repo.stop/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stream/2 .","ref":"EpochtalkServer.Repo.html#stream/2","title":"EpochtalkServer.Repo.stream/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that translates the given query to SQL. See Ecto.Adapters.SQL.to_sql/3 for more information.","ref":"EpochtalkServer.Repo.html#to_sql/2","title":"EpochtalkServer.Repo.to_sql/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.transaction/2 .","ref":"EpochtalkServer.Repo.html#transaction/2","title":"EpochtalkServer.Repo.transaction/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update/2 .","ref":"EpochtalkServer.Repo.html#update/2","title":"EpochtalkServer.Repo.update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update!/2 .","ref":"EpochtalkServer.Repo.html#update!/2","title":"EpochtalkServer.Repo.update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update_all/3 .","ref":"EpochtalkServer.Repo.html#update_all/3","title":"EpochtalkServer.Repo.update_all/3","type":"function"},{"doc":"Manages User sessions in Redis. Used by Auth related User actions.","ref":"EpochtalkServer.Session.html","title":"EpochtalkServer.Session","type":"module"},{"doc":"Create session performs the following actions: Sets user's session id, timestamp, ttl Logs User in with Guardian to get token Saves User session info to redis (avatar, roles, moderating, ban info, etc) returns {:ok, user, token and conn}","ref":"EpochtalkServer.Session.html#create/3","title":"EpochtalkServer.Session.create/3","type":"function"},{"doc":"Deletes the session specified in conn","ref":"EpochtalkServer.Session.html#delete/1","title":"EpochtalkServer.Session.delete/1","type":"function"},{"doc":"Deletes every session instance for the specified User","ref":"EpochtalkServer.Session.html#delete_sessions/1","title":"EpochtalkServer.Session.delete_sessions/1","type":"function"},{"doc":"Get the resource for a specified user_id and session_id if available Otherwise, return an error","ref":"EpochtalkServer.Session.html#get_resource/2","title":"EpochtalkServer.Session.get_resource/2","type":"function"},{"doc":"Gets all session ids for a specific user_id","ref":"EpochtalkServer.Session.html#get_sessions/1","title":"EpochtalkServer.Session.get_sessions/1","type":"function"},{"doc":"Update session performs the following actions for active session: Saves User session info to redis (avatar, roles, moderating, ban info, etc) returns {:ok, user} on success returns {:error, reason} on failure DOES NOT change: User's session id, timestamp, ttl Guardian token","ref":"EpochtalkServer.Session.html#update/1","title":"EpochtalkServer.Session.update/1","type":"function"},{"doc":"This code is taken and modified from: https://github.com/achedeuzot/ecto_commons This module provides validators for NaiveDateTime s. You can use the following checks: :is to check if a NaiveDateTime is exactly some NaiveDateTime . You can also provide a :delta option (in seconds) to specify a delta around which the NaiveDateTime is still considered identical. :before to check if a NaiveDateTime is before some NaiveDateTime :after to check if a NaiveDateTime is after some NaiveDateTime You can also combine the given checks for complex checks. Errors won't be stacked though, the first error encountered will be returned and subsequent checks will be skipped. If you want to check everything at once, you'll need to call this validator multiple times. Also, instead of providing a NaiveDateTime , you can also provide some special atoms: :utc_now will compare the given NaiveDateTime with the NaiveDateTime at runtime, by calling NaiveDateTime.utc_now() . Example: iex&gt; types = %{ birthdate : :utc_datetime } iex&gt; params = %{ birthdate : ~U[2016-05-24 13:26:08Z] } iex&gt; Ecto.Changeset . cast ( { %{ } , types } , params , Map . keys ( types ) ) ...&gt; |&gt; validate_naivedatetime ( :birthdate ) # Ecto.Changeset &lt; action : nil , changes : %{ birthdate : ~U[2016-05-24 13:26:08Z] } , errors : [ ] , data : %{ } , valid? : true &gt; # Using :is to ensure a date is identical to another date iex&gt; types = %{ birthdate : :utc_datetime } iex&gt; params = %{ birthdate : ~U[2016-05-24 13:26:08Z] } iex&gt; Ecto.Changeset . cast ( { %{ } , types } , params , Map . keys ( types ) ) ...&gt; |&gt; validate_naivedatetime ( :birthdate , is : ~U[2016-05-24 13:26:08Z] ) # Ecto.Changeset &lt; action : nil , changes : %{ birthdate : ~U[2016-05-24 13:26:08Z] } , errors : [ ] , data : %{ } , valid? : true &gt; iex&gt; types = %{ birthdate : :utc_datetime } iex&gt; params = %{ birthdate : ~U[2016-05-24 13:26:08Z] } iex&gt; Ecto.Changeset . cast ( { %{ } , types } , params , Map . keys ( types ) ) ...&gt; |&gt; validate_naivedatetime ( :birthdate , is : ~U[2017-05-24 13:26:08Z] ) # Ecto.Changeset &lt; action : nil , changes : %{ birthdate : ~U[2016-05-24 13:26:08Z] } , errors : [ birthdate : { &quot;should be %{is}.&quot; , [ validation : :datetime , kind : :is ] } ] , data : %{ } , valid? : false &gt; # Using :is with :delta to ensure a date is near another another date iex&gt; types = %{ birthdate : :utc_datetime } iex&gt; params = %{ birthdate : ~U[2016-05-24 13:26:08Z] } iex&gt; Ecto.Changeset . cast ( { %{ } , types } , params , Map . keys ( types ) ) ...&gt; |&gt; validate_naivedatetime ( :birthdate , is : ~U[2016-05-24 13:46:08Z] , delta : 3600 ) # Ecto.Changeset &lt; action : nil , changes : %{ birthdate : ~U[2016-05-24 13:26:08Z] } , errors : [ ] , data : %{ } , valid? : true &gt; iex&gt; types = %{ birthdate : :utc_datetime } iex&gt; params = %{ birthdate : ~U[2016-05-24 15:26:08Z] } iex&gt; Ecto.Changeset . cast ( { %{ } , types } , params , Map . keys ( types ) ) ...&gt; |&gt; validate_naivedatetime ( :birthdate , is : ~U[2016-05-24 13:26:08Z] , delta : 3600 ) # Ecto.Changeset &lt; action : nil , changes : %{ birthdate : ~U[2016-05-24 15:26:08Z] } , errors : [ birthdate : { &quot;should be %{is}.&quot; , [ validation : :datetime , kind : :is ] } ] , data : %{ } , valid? : false &gt; # Using :before to ensure date is before given date iex&gt; types = %{ birthdate : :utc_datetime } iex&gt; params = %{ birthdate : ~U[2016-05-24 13:26:08Z] } iex&gt; Ecto.Changeset . cast ( { %{ } , types } , params , Map . keys ( types ) ) ...&gt; |&gt; validate_naivedatetime ( :birthdate , before : ~U[2017-05-24 00:00:00Z] ) # Ecto.Changeset &lt; action : nil , changes : %{ birthdate : ~U[2016-05-24 13:26:08Z] } , errors : [ ] , data : %{ } , valid? : true &gt; iex&gt; types = %{ birthdate : :utc_datetime } iex&gt; params = %{ birthdate : ~U[2016-05-24 13:26:08Z] } iex&gt; Ecto.Changeset . cast ( { %{ } , types } , params , Map . keys ( types ) ) ...&gt; |&gt; validate_naivedatetime ( :birthdate , before : ~U[2015-05-24 00:00:00Z] ) # Ecto.Changeset &lt; action : nil , changes : %{ birthdate : ~U[2016-05-24 13:26:08Z] } , errors : [ birthdate : { &quot;should be before %{before}.&quot; , [ validation : :datetime , kind : :before ] } ] , data : %{ } , valid? : false &gt; iex&gt; types = %{ birthdate : :utc_datetime } iex&gt; params = %{ birthdate : ~U[2016-05-24 13:26:08Z] } iex&gt; Ecto.Changeset . cast ( { %{ } , types } , params , Map . keys ( types ) ) ...&gt; |&gt; validate_naivedatetime ( :birthdate , before : :utc_now ) # Ecto.Changeset &lt; action : nil , changes : %{ birthdate : ~U[2016-05-24 13:26:08Z] } , errors : [ ] , data : %{ } , valid? : true &gt; iex&gt; types = %{ birthdate : :utc_datetime } iex&gt; params = %{ birthdate : ~U[3000-05-24 13:26:08Z] } iex&gt; Ecto.Changeset . cast ( { %{ } , types } , params , Map . keys ( types ) ) ...&gt; |&gt; validate_naivedatetime ( :birthdate , before : :utc_now ) # Ecto.Changeset &lt; action : nil , changes : %{ birthdate : ~U[3000-05-24 13:26:08Z] } , errors : [ birthdate : { &quot;should be before %{before}.&quot; , [ validation : :datetime , kind : :before ] } ] , data : %{ } , valid? : false &gt; # Using :after to ensure date is after given date iex&gt; types = %{ birthdate : :utc_datetime } iex&gt; params = %{ birthdate : ~U[2016-05-24 13:26:08Z] } iex&gt; Ecto.Changeset . cast ( { %{ } , types } , params , Map . keys ( types ) ) ...&gt; |&gt; validate_naivedatetime ( :birthdate , after : ~U[2015-05-24 00:00:00Z] ) # Ecto.Changeset &lt; action : nil , changes : %{ birthdate : ~U[2016-05-24 13:26:08Z] } , errors : [ ] , data : %{ } , valid? : true &gt; iex&gt; types = %{ birthdate : :utc_datetime } iex&gt; params = %{ birthdate : ~U[2016-05-24 13:26:08Z] } iex&gt; Ecto.Changeset . cast ( { %{ } , types } , params , Map . keys ( types ) ) ...&gt; |&gt; validate_naivedatetime ( :birthdate , after : ~U[2017-05-24 00:00:00Z] ) # Ecto.Changeset &lt; action : nil , changes : %{ birthdate : ~U[2016-05-24 13:26:08Z] } , errors : [ birthdate : { &quot;should be after %{after}.&quot; , [ validation : :datetime , kind : :after ] } ] , data : %{ } , valid? : false &gt; iex&gt; types = %{ birthdate : :utc_datetime } iex&gt; params = %{ birthdate : ~U[3000-05-24 13:26:08Z] } iex&gt; Ecto.Changeset . cast ( { %{ } , types } , params , Map . keys ( types ) ) ...&gt; |&gt; validate_naivedatetime ( :birthdate , after : :utc_now ) # Ecto.Changeset &lt; action : nil , changes : %{ birthdate : ~U[3000-05-24 13:26:08Z] } , errors : [ ] , data : %{ } , valid? : true &gt; iex&gt; types = %{ birthdate : :utc_datetime } iex&gt; params = %{ birthdate : ~U[1000-05-24 13:26:08Z] } iex&gt; Ecto.Changeset . cast ( { %{ } , types } , params , Map . keys ( types ) ) ...&gt; |&gt; validate_naivedatetime ( :birthdate , after : :utc_now ) # Ecto.Changeset &lt; action : nil , changes : %{ birthdate : ~U[1000-05-24 13:26:08Z] } , errors : [ birthdate : { &quot;should be after %{after}.&quot; , [ validation : :datetime , kind : :after ] } ] , data : %{ } , valid? : false &gt;","ref":"EpochtalkServer.Validators.NaiveDateTime.html","title":"EpochtalkServer.Validators.NaiveDateTime","type":"module"},{"doc":"","ref":"EpochtalkServer.Validators.NaiveDateTime.html#validate_naivedatetime/3","title":"EpochtalkServer.Validators.NaiveDateTime.validate_naivedatetime/3","type":"function"},{"doc":"The entrypoint for defining your web interface, such as controllers, views, channels and so on. This can be used in your application as: use EpochtalkServerWeb , :controller use EpochtalkServerWeb , :view The definitions below will be executed for every view, controller, etc, so keep them short and clean, focused on imports, uses and aliases. Do NOT define functions inside the quoted expressions below. Instead, define any helper function in modules and import those modules here.","ref":"EpochtalkServerWeb.html","title":"EpochtalkServerWeb","type":"module"},{"doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"EpochtalkServerWeb.html#__using__/1","title":"EpochtalkServerWeb.__using__/1","type":"macro"},{"doc":"","ref":"EpochtalkServerWeb.html#channel/0","title":"EpochtalkServerWeb.channel/0","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.html#controller/0","title":"EpochtalkServerWeb.controller/0","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.html#embed_templates/2","title":"EpochtalkServerWeb.embed_templates/2","type":"macro"},{"doc":"","ref":"EpochtalkServerWeb.html#js/0","title":"EpochtalkServerWeb.js/0","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.html#router/0","title":"EpochtalkServerWeb.router/0","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.html#static_paths/0","title":"EpochtalkServerWeb.static_paths/0","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.html#verified_routes/0","title":"EpochtalkServerWeb.verified_routes/0","type":"function"},{"doc":"Controller For Board related API requests","ref":"EpochtalkServerWeb.Controllers.Board.html","title":"EpochtalkServerWeb.Controllers.Board","type":"module"},{"doc":"Used to retrieve categorized boards","ref":"EpochtalkServerWeb.Controllers.Board.html#by_category/2","title":"EpochtalkServerWeb.Controllers.Board.by_category/2","type":"function"},{"doc":"Used to find a specific board","ref":"EpochtalkServerWeb.Controllers.Board.html#find/2","title":"EpochtalkServerWeb.Controllers.Board.find/2","type":"function"},{"doc":"Used to retrieve Board movelist for moderators","ref":"EpochtalkServerWeb.Controllers.Board.html#movelist/2","title":"EpochtalkServerWeb.Controllers.Board.movelist/2","type":"function"},{"doc":"Used to convert Board slug to id","ref":"EpochtalkServerWeb.Controllers.Board.html#slug_to_id/2","title":"EpochtalkServerWeb.Controllers.Board.slug_to_id/2","type":"function"},{"doc":"Renders and formats Controllers.Board data, in JSON format for frontend","ref":"EpochtalkServerWeb.Controllers.BoardJSON.html","title":"EpochtalkServerWeb.Controllers.BoardJSON","type":"module"},{"doc":"Renders Board data by Category .","ref":"EpochtalkServerWeb.Controllers.BoardJSON.html#by_category/1","title":"EpochtalkServerWeb.Controllers.BoardJSON.by_category/1","type":"function"},{"doc":"Renders Board for find query.","ref":"EpochtalkServerWeb.Controllers.BoardJSON.html#find/1","title":"EpochtalkServerWeb.Controllers.BoardJSON.find/1","type":"function"},{"doc":"Board view helper method for mapping childboards and other metadata to board using board mapping and user priority","ref":"EpochtalkServerWeb.Controllers.BoardJSON.html#format_board_data_for_find/4","title":"EpochtalkServerWeb.Controllers.BoardJSON.format_board_data_for_find/4","type":"function"},{"doc":"Renders Board data for movelist route","ref":"EpochtalkServerWeb.Controllers.BoardJSON.html#movelist/1","title":"EpochtalkServerWeb.Controllers.BoardJSON.movelist/1","type":"function"},{"doc":"Renders Board id for slug to id route.","ref":"EpochtalkServerWeb.Controllers.BoardJSON.html#slug_to_id/1","title":"EpochtalkServerWeb.Controllers.BoardJSON.slug_to_id/1","type":"function"},{"doc":"Controller For Breadcrumbs related API requests","ref":"EpochtalkServerWeb.Controllers.Breadcrumb.html","title":"EpochtalkServerWeb.Controllers.Breadcrumb","type":"module"},{"doc":"Used to return breadcrumbs to the frontend`","ref":"EpochtalkServerWeb.Controllers.Breadcrumb.html#breadcrumbs/2","title":"EpochtalkServerWeb.Controllers.Breadcrumb.breadcrumbs/2","type":"function"},{"doc":"Renders and formats Breadcrumb data, in JSON format for frontend","ref":"EpochtalkServerWeb.Controllers.BreadcrumbJSON.html","title":"EpochtalkServerWeb.Controllers.BreadcrumbJSON","type":"module"},{"doc":"Renders Breadcrumb entries.","ref":"EpochtalkServerWeb.Controllers.BreadcrumbJSON.html#breadcrumbs/1","title":"EpochtalkServerWeb.Controllers.BreadcrumbJSON.breadcrumbs/1","type":"function"},{"doc":"Controller For Configuration related API requests","ref":"EpochtalkServerWeb.Controllers.Configuration.html","title":"EpochtalkServerWeb.Controllers.Configuration","type":"module"},{"doc":"Used to render /config.js which is used by the Epochtalk Vue Frontend","ref":"EpochtalkServerWeb.Controllers.Configuration.html#config/2","title":"EpochtalkServerWeb.Controllers.Configuration.config/2","type":"function"},{"doc":"Used to render Configuration related *.js.eex templates","ref":"EpochtalkServerWeb.Controllers.ConfigurationJS.html","title":"EpochtalkServerWeb.Controllers.ConfigurationJS","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.Controllers.ConfigurationJS.html#config/1","title":"EpochtalkServerWeb.Controllers.ConfigurationJS.config/1","type":"function"},{"doc":"Renders and formats error data, in JSON format for frontend","ref":"EpochtalkServerWeb.Controllers.ErrorJSON.html","title":"EpochtalkServerWeb.Controllers.ErrorJSON","type":"module"},{"doc":"Render has been modified to handle and all types of errors. Epochtalk Server sends all errors through this render in order to create a consistent error JSON. Example iex&gt; EpochtalkServerWeb.Controllers.ErrorJSON . render ( &quot;500.json&quot; ) %{ error : &quot;Internal Server Error&quot; , message : &quot;Request Error&quot; , status : 500 } iex&gt; EpochtalkServerWeb.Controllers.ErrorJSON . render ( &quot;400.json&quot; ) %{ error : &quot;Bad Request&quot; , message : &quot;Request Error&quot; , status : 400 } iex&gt; EpochtalkServerWeb.Controllers.ErrorJSON . render ( &quot;404.json&quot; ) %{ error : &quot;Not Found&quot; , message : &quot;Request Error&quot; , status : 404 } iex&gt; EpochtalkServerWeb.Controllers.ErrorJSON . render ( &quot;401.json&quot; ) %{ error : &quot;Unauthorized&quot; , message : &quot;Request Error&quot; , status : 401 } iex&gt; EpochtalkServerWeb.Controllers.ErrorJSON . template_not_found ( &quot;DoesNotExist.json&quot; , %{ message : &quot;Custom Error Message&quot; , status : 500 } ) %{ error : &quot;Internal Server Error&quot; , message : &quot;Custom Error Message&quot; , status : 500 } iex&gt; EpochtalkServerWeb.Controllers.ErrorJSON . template_not_found ( &quot;DoesNotExist.json&quot; , %{ message : &quot;Custom Error Message&quot; , status : 404 } ) %{ error : &quot;Not Found&quot; , message : &quot;Custom Error Message&quot; , status : 404 }","ref":"EpochtalkServerWeb.Controllers.ErrorJSON.html#render/1","title":"EpochtalkServerWeb.Controllers.ErrorJSON.render/1","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Controllers.ErrorJSON.html#render/2","title":"EpochtalkServerWeb.Controllers.ErrorJSON.render/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Controllers.ErrorJSON.html#template_not_found/2","title":"EpochtalkServerWeb.Controllers.ErrorJSON.template_not_found/2","type":"function"},{"doc":"Controller For Mention related API requests","ref":"EpochtalkServerWeb.Controllers.Mention.html","title":"EpochtalkServerWeb.Controllers.Mention","type":"module"},{"doc":"Used to page Mention models for a specific User","ref":"EpochtalkServerWeb.Controllers.Mention.html#page/2","title":"EpochtalkServerWeb.Controllers.Mention.page/2","type":"function"},{"doc":"Renders and formats User data, in JSON format for frontend","ref":"EpochtalkServerWeb.Controllers.MentionJSON.html","title":"EpochtalkServerWeb.Controllers.MentionJSON","type":"module"},{"doc":"Renders paginated User mentions. If extended is true returns additional Board and Post details.","ref":"EpochtalkServerWeb.Controllers.MentionJSON.html#page/1","title":"EpochtalkServerWeb.Controllers.MentionJSON.page/1","type":"function"},{"doc":"Controller For ModerationLog related API requests","ref":"EpochtalkServerWeb.Controllers.ModerationLog.html","title":"EpochtalkServerWeb.Controllers.ModerationLog","type":"module"},{"doc":"Used to page ModerationLog models for moderation log view`","ref":"EpochtalkServerWeb.Controllers.ModerationLog.html#page/2","title":"EpochtalkServerWeb.Controllers.ModerationLog.page/2","type":"function"},{"doc":"Renders and formats ModerationLog data, in JSON format for frontend","ref":"EpochtalkServerWeb.Controllers.ModerationLogJSON.html","title":"EpochtalkServerWeb.Controllers.ModerationLogJSON","type":"module"},{"doc":"Renders paginated ModerationLog entries.","ref":"EpochtalkServerWeb.Controllers.ModerationLogJSON.html#page/1","title":"EpochtalkServerWeb.Controllers.ModerationLogJSON.page/1","type":"function"},{"doc":"Controller For Notification related API requests","ref":"EpochtalkServerWeb.Controllers.Notification.html","title":"EpochtalkServerWeb.Controllers.Notification","type":"module"},{"doc":"Used to retrieve Notification counts for a specific User","ref":"EpochtalkServerWeb.Controllers.Notification.html#counts/2","title":"EpochtalkServerWeb.Controllers.Notification.counts/2","type":"function"},{"doc":"Used to dismiss Notification counts for a specific User","ref":"EpochtalkServerWeb.Controllers.Notification.html#dismiss/2","title":"EpochtalkServerWeb.Controllers.Notification.dismiss/2","type":"function"},{"doc":"Renders and formats User data, in JSON format for frontend","ref":"EpochtalkServerWeb.Controllers.NotificationJSON.html","title":"EpochtalkServerWeb.Controllers.NotificationJSON","type":"module"},{"doc":"Renders Notification counts data in JSON","ref":"EpochtalkServerWeb.Controllers.NotificationJSON.html#counts/1","title":"EpochtalkServerWeb.Controllers.NotificationJSON.counts/1","type":"function"},{"doc":"Renders Notification dismiss data in JSON","ref":"EpochtalkServerWeb.Controllers.NotificationJSON.html#dismiss/1","title":"EpochtalkServerWeb.Controllers.NotificationJSON.dismiss/1","type":"function"},{"doc":"Controller For Post related API requests","ref":"EpochtalkServerWeb.Controllers.Post.html","title":"EpochtalkServerWeb.Controllers.Post","type":"module"},{"doc":"Used to retrieve Posts by Thread Test Cases: Authenticated vs Not Authenticated Thread with Poll vs no Poll Query with start position vs page Read/Write access test against user priority (postable/writable by on board) Base permission check Authorizations tests Board ban on authed user Board and Thread metadata is correct (ex: board.signature_disabled, thread.trust_visible) Ignored users posts are hidden properly Rank and activity are calculated for each post","ref":"EpochtalkServerWeb.Controllers.Post.html#by_thread/2","title":"EpochtalkServerWeb.Controllers.Post.by_thread/2","type":"function"},{"doc":"Used to create posts","ref":"EpochtalkServerWeb.Controllers.Post.html#create/2","title":"EpochtalkServerWeb.Controllers.Post.create/2","type":"function"},{"doc":"Renders and formats Post data, in JSON format for frontend","ref":"EpochtalkServerWeb.Controllers.PostJSON.html","title":"EpochtalkServerWeb.Controllers.PostJSON","type":"module"},{"doc":"Renders all Post for a particular Thread .","ref":"EpochtalkServerWeb.Controllers.PostJSON.html#by_thread/1","title":"EpochtalkServerWeb.Controllers.PostJSON.by_thread/1","type":"function"},{"doc":"Renders Post data after creating new Post","ref":"EpochtalkServerWeb.Controllers.PostJSON.html#create/1","title":"EpochtalkServerWeb.Controllers.PostJSON.create/1","type":"function"},{"doc":"Controller For Preference related API requests","ref":"EpochtalkServerWeb.Controllers.Preference.html","title":"EpochtalkServerWeb.Controllers.Preference","type":"module"},{"doc":"Used to retrieve preferences of a specific User","ref":"EpochtalkServerWeb.Controllers.Preference.html#preferences/2","title":"EpochtalkServerWeb.Controllers.Preference.preferences/2","type":"function"},{"doc":"Renders and formats Preference data, in JSON format for frontend","ref":"EpochtalkServerWeb.Controllers.PreferenceJSON.html","title":"EpochtalkServerWeb.Controllers.PreferenceJSON","type":"module"},{"doc":"Renders formatted JSON response for user preferences. Example iex&gt; EpochtalkServerWeb.Controllers.PreferenceJSON.preferences(%{preferences: nil}) %{ posts_per_page : 25 , threads_per_page : 25 , collapsed_categories : [ ] , ignored_boards : [ ] , timezone_offset : &quot;&quot; , notify_replied_threads : true , ignore_newbies : false , patroller_view : false , email_mentions : true , email_messages : true } iex&gt; preferences = %{ iex&gt; posts_per_page: 25, iex&gt; threads_per_page: 25, iex&gt; collapsed_categories: %{&quot;cats&quot; =&gt; []}, iex&gt; ignored_boards: %{&quot;boards&quot; =&gt; []}, iex&gt; timezone_offset: &quot;&quot;, iex&gt; notify_replied_threads: true, iex&gt; ignore_newbies: false, iex&gt; patroller_view: false, iex&gt; email_mentions: true, iex&gt; email_messages: true iex&gt; } iex&gt; EpochtalkServerWeb.Controllers.PreferenceJSON.preferences(%{preferences: preferences})","ref":"EpochtalkServerWeb.Controllers.PreferenceJSON.html#preferences/1","title":"EpochtalkServerWeb.Controllers.PreferenceJSON.preferences/1","type":"function"},{"doc":"Controller For Role related API requests","ref":"EpochtalkServerWeb.Controllers.Role.html","title":"EpochtalkServerWeb.Controllers.Role","type":"module"},{"doc":"Get all Role s","ref":"EpochtalkServerWeb.Controllers.Role.html#all/2","title":"EpochtalkServerWeb.Controllers.Role.all/2","type":"function"},{"doc":"Used to update a specific Role Returns id of Role on success","ref":"EpochtalkServerWeb.Controllers.Role.html#update/2","title":"EpochtalkServerWeb.Controllers.Role.update/2","type":"function"},{"doc":"Renders and formats Role data, in JSON format for frontend","ref":"EpochtalkServerWeb.Controllers.RoleJSON.html","title":"EpochtalkServerWeb.Controllers.RoleJSON","type":"module"},{"doc":"Renders Role all result data in JSON","ref":"EpochtalkServerWeb.Controllers.RoleJSON.html#all/1","title":"EpochtalkServerWeb.Controllers.RoleJSON.all/1","type":"function"},{"doc":"Renders Role update result data in JSON","ref":"EpochtalkServerWeb.Controllers.RoleJSON.html#update/1","title":"EpochtalkServerWeb.Controllers.RoleJSON.update/1","type":"function"},{"doc":"Controller For Thread related API requests","ref":"EpochtalkServerWeb.Controllers.Thread.html","title":"EpochtalkServerWeb.Controllers.Thread","type":"module"},{"doc":"Used to retrieve threads by board","ref":"EpochtalkServerWeb.Controllers.Thread.html#by_board/2","title":"EpochtalkServerWeb.Controllers.Thread.by_board/2","type":"function"},{"doc":"Used to create threads","ref":"EpochtalkServerWeb.Controllers.Thread.html#create/2","title":"EpochtalkServerWeb.Controllers.Thread.create/2","type":"function"},{"doc":"Used to retrieve recent threads","ref":"EpochtalkServerWeb.Controllers.Thread.html#recent/2","title":"EpochtalkServerWeb.Controllers.Thread.recent/2","type":"function"},{"doc":"Used to convert Thread slug to id","ref":"EpochtalkServerWeb.Controllers.Thread.html#slug_to_id/2","title":"EpochtalkServerWeb.Controllers.Thread.slug_to_id/2","type":"function"},{"doc":"Used to mark Thread as viewed for a specific user","ref":"EpochtalkServerWeb.Controllers.Thread.html#viewed/2","title":"EpochtalkServerWeb.Controllers.Thread.viewed/2","type":"function"},{"doc":"Renders and formats Thread data, in JSON format for frontend","ref":"EpochtalkServerWeb.Controllers.ThreadJSON.html","title":"EpochtalkServerWeb.Controllers.ThreadJSON","type":"module"},{"doc":"Renders Thread for by_board query.","ref":"EpochtalkServerWeb.Controllers.ThreadJSON.html#by_board/1","title":"EpochtalkServerWeb.Controllers.ThreadJSON.by_board/1","type":"function"},{"doc":"Renders Thread for create.","ref":"EpochtalkServerWeb.Controllers.ThreadJSON.html#create/1","title":"EpochtalkServerWeb.Controllers.ThreadJSON.create/1","type":"function"},{"doc":"Used to format Thread user data from db into the format the frontend expects","ref":"EpochtalkServerWeb.Controllers.ThreadJSON.html#format_user_data/1","title":"EpochtalkServerWeb.Controllers.ThreadJSON.format_user_data/1","type":"function"},{"doc":"Renders recent Thread data.","ref":"EpochtalkServerWeb.Controllers.ThreadJSON.html#recent/1","title":"EpochtalkServerWeb.Controllers.ThreadJSON.recent/1","type":"function"},{"doc":"Renders Thread id for slug to id route.","ref":"EpochtalkServerWeb.Controllers.ThreadJSON.html#slug_to_id/1","title":"EpochtalkServerWeb.Controllers.ThreadJSON.slug_to_id/1","type":"function"},{"doc":"Controller For User related API requests","ref":"EpochtalkServerWeb.Controllers.User.html","title":"EpochtalkServerWeb.Controllers.User","type":"module"},{"doc":"Authenticates currently logged in User","ref":"EpochtalkServerWeb.Controllers.User.html#authenticate/2","title":"EpochtalkServerWeb.Controllers.User.authenticate/2","type":"function"},{"doc":"Confirms a newly registered User . Used when :epochtalk_server[:frontend_config][&quot;verify_registration&quot;] configuration is set to true","ref":"EpochtalkServerWeb.Controllers.User.html#confirm/2","title":"EpochtalkServerWeb.Controllers.User.confirm/2","type":"function"},{"doc":"Used to check if an email has already been taken","ref":"EpochtalkServerWeb.Controllers.User.html#email/2","title":"EpochtalkServerWeb.Controllers.User.email/2","type":"function"},{"doc":"Logs in an existing User","ref":"EpochtalkServerWeb.Controllers.User.html#login/2","title":"EpochtalkServerWeb.Controllers.User.login/2","type":"function"},{"doc":"Logs out the logged in User","ref":"EpochtalkServerWeb.Controllers.User.html#logout/2","title":"EpochtalkServerWeb.Controllers.User.logout/2","type":"function"},{"doc":"Registers a new User","ref":"EpochtalkServerWeb.Controllers.User.html#register/2","title":"EpochtalkServerWeb.Controllers.User.register/2","type":"function"},{"doc":"Used to check if a username has already been taken","ref":"EpochtalkServerWeb.Controllers.User.html#username/2","title":"EpochtalkServerWeb.Controllers.User.username/2","type":"function"},{"doc":"Renders and formats User data, in JSON format for frontend","ref":"EpochtalkServerWeb.Controllers.UserJSON.html","title":"EpochtalkServerWeb.Controllers.UserJSON","type":"module"},{"doc":"Renders whatever data it is passed when template not found. Data pass through for rendering misc responses (ex: {found: true} or {success: true}) Example iex&gt; EpochtalkServerWeb.Controllers.UserJSON . data ( %{ data : %{ found : true } } ) %{ found : true } iex&gt; EpochtalkServerWeb.Controllers.UserJSON . data ( %{ data : %{ success : true } } ) %{ success : true }","ref":"EpochtalkServerWeb.Controllers.UserJSON.html#data/1","title":"EpochtalkServerWeb.Controllers.UserJSON.data/1","type":"function"},{"doc":"Renders formatted JSON response for registration confirmation. Example iex&gt; EpochtalkServerWeb.Controllers.UserJSON.register_with_verify(%{user: %User{ username: &quot;Test&quot; }}) %{ username : &quot;Test&quot; , confirm_token : true , message : &quot;Successfully registered, please confirm account to login.&quot; }","ref":"EpochtalkServerWeb.Controllers.UserJSON.html#register_with_verify/1","title":"EpochtalkServerWeb.Controllers.UserJSON.register_with_verify/1","type":"function"},{"doc":"Renders formatted user JSON. Takes in a User with all associations preloaded and outputs formatted user json used for auth. Masks all user's roles to generate correct permissions set.","ref":"EpochtalkServerWeb.Controllers.UserJSON.html#user/1","title":"EpochtalkServerWeb.Controllers.UserJSON.user/1","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.CustomErrors.html","title":"EpochtalkServerWeb.CustomErrors","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.Endpoint.html","title":"EpochtalkServerWeb.Endpoint","type":"module"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast/3 .","ref":"EpochtalkServerWeb.Endpoint.html#broadcast/3","title":"EpochtalkServerWeb.Endpoint.broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast!/3 .","ref":"EpochtalkServerWeb.Endpoint.html#broadcast!/3","title":"EpochtalkServerWeb.Endpoint.broadcast!/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from/4 .","ref":"EpochtalkServerWeb.Endpoint.html#broadcast_from/4","title":"EpochtalkServerWeb.Endpoint.broadcast_from/4","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from!/4 .","ref":"EpochtalkServerWeb.Endpoint.html#broadcast_from!/4","title":"EpochtalkServerWeb.Endpoint.broadcast_from!/4","type":"function"},{"doc":"Callback implementation for Plug.call/2 .","ref":"EpochtalkServerWeb.Endpoint.html#call/2","title":"EpochtalkServerWeb.Endpoint.call/2","type":"function"},{"doc":"Returns the child specification to start the endpoint under a supervision tree.","ref":"EpochtalkServerWeb.Endpoint.html#child_spec/1","title":"EpochtalkServerWeb.Endpoint.child_spec/1","type":"function"},{"doc":"Returns the endpoint configuration for key Returns default if the key does not exist.","ref":"EpochtalkServerWeb.Endpoint.html#config/2","title":"EpochtalkServerWeb.Endpoint.config/2","type":"function"},{"doc":"Reloads the configuration given the application environment changes.","ref":"EpochtalkServerWeb.Endpoint.html#config_change/2","title":"EpochtalkServerWeb.Endpoint.config_change/2","type":"function"},{"doc":"Returns the host for the given endpoint.","ref":"EpochtalkServerWeb.Endpoint.html#host/0","title":"EpochtalkServerWeb.Endpoint.host/0","type":"function"},{"doc":"Callback implementation for Plug.init/1 .","ref":"EpochtalkServerWeb.Endpoint.html#init/1","title":"EpochtalkServerWeb.Endpoint.init/1","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast/3 .","ref":"EpochtalkServerWeb.Endpoint.html#local_broadcast/3","title":"EpochtalkServerWeb.Endpoint.local_broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast_from/4 .","ref":"EpochtalkServerWeb.Endpoint.html#local_broadcast_from/4","title":"EpochtalkServerWeb.Endpoint.local_broadcast_from/4","type":"function"},{"doc":"Generates the path information when routing to this endpoint.","ref":"EpochtalkServerWeb.Endpoint.html#path/1","title":"EpochtalkServerWeb.Endpoint.path/1","type":"function"},{"doc":"Generates the script name.","ref":"EpochtalkServerWeb.Endpoint.html#script_name/0","title":"EpochtalkServerWeb.Endpoint.script_name/0","type":"function"},{"doc":"Starts the endpoint supervision tree. All other options are merged into the endpoint configuration.","ref":"EpochtalkServerWeb.Endpoint.html#start_link/1","title":"EpochtalkServerWeb.Endpoint.start_link/1","type":"function"},{"doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static . Meant to be used for Subresource Integrity with CDNs.","ref":"EpochtalkServerWeb.Endpoint.html#static_integrity/1","title":"EpochtalkServerWeb.Endpoint.static_integrity/1","type":"function"},{"doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity .","ref":"EpochtalkServerWeb.Endpoint.html#static_lookup/1","title":"EpochtalkServerWeb.Endpoint.static_lookup/1","type":"function"},{"doc":"Generates a route to a static file in priv/static .","ref":"EpochtalkServerWeb.Endpoint.html#static_path/1","title":"EpochtalkServerWeb.Endpoint.static_path/1","type":"function"},{"doc":"Generates the static URL without any path information. It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set.","ref":"EpochtalkServerWeb.Endpoint.html#static_url/0","title":"EpochtalkServerWeb.Endpoint.static_url/0","type":"function"},{"doc":"Generates the endpoint base URL but as a URI struct. It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers.","ref":"EpochtalkServerWeb.Endpoint.html#struct_url/0","title":"EpochtalkServerWeb.Endpoint.struct_url/0","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.subscribe/2 .","ref":"EpochtalkServerWeb.Endpoint.html#subscribe/2","title":"EpochtalkServerWeb.Endpoint.subscribe/2","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.unsubscribe/1 .","ref":"EpochtalkServerWeb.Endpoint.html#unsubscribe/1","title":"EpochtalkServerWeb.Endpoint.unsubscribe/1","type":"function"},{"doc":"Generates the endpoint base URL without any path information. It uses the configuration under :url to generate such.","ref":"EpochtalkServerWeb.Endpoint.html#url/0","title":"EpochtalkServerWeb.Endpoint.url/0","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Endpoint.CacheBodyReader.html","title":"EpochtalkServerWeb.Endpoint.CacheBodyReader","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.Endpoint.CacheBodyReader.html#read_body/2","title":"EpochtalkServerWeb.Endpoint.CacheBodyReader.read_body/2","type":"function"},{"doc":"Conveniences for translating and building error messages.","ref":"EpochtalkServerWeb.ErrorHelpers.html","title":"EpochtalkServerWeb.ErrorHelpers","type":"module"},{"doc":"Translates changeset errors to string message.","ref":"EpochtalkServerWeb.ErrorHelpers.html#changeset_error_to_string/1","title":"EpochtalkServerWeb.ErrorHelpers.changeset_error_to_string/1","type":"function"},{"doc":"Renders error json from error data which could be a message or changeset errors.","ref":"EpochtalkServerWeb.ErrorHelpers.html#render_json_error/3","title":"EpochtalkServerWeb.ErrorHelpers.render_json_error/3","type":"function"},{"doc":"Helper module which intercepts guardian errors.","ref":"EpochtalkServerWeb.GuardianErrorHandler.html","title":"EpochtalkServerWeb.GuardianErrorHandler","type":"module"},{"doc":"This is used to convert errors coming out of the guardian pipelines into a json error, Renders error tuples received from guardian pipeline into a json error response.","ref":"EpochtalkServerWeb.GuardianErrorHandler.html#auth_error/3","title":"EpochtalkServerWeb.GuardianErrorHandler.auth_error/3","type":"function"},{"doc":"Helper for checking authenticated user's permissions.","ref":"EpochtalkServerWeb.Helpers.ACL.html","title":"EpochtalkServerWeb.Helpers.ACL","type":"module"},{"doc":"Checks if authenticated User is allowed to perform a specific action. Compares a mask all of user's roles into a masked permission set and checks if that permission set contains the specified permission_path . Raises CustomErrors.InvalidPermission exception if the User does not have the proper permissions.","ref":"EpochtalkServerWeb.Helpers.ACL.html#allow!/2","title":"EpochtalkServerWeb.Helpers.ACL.allow!/2","type":"function"},{"doc":"Same as ACL.allow!/2 but allows a custom error message to be raised if the User does not have the proper permissions.","ref":"EpochtalkServerWeb.Helpers.ACL.html#allow!/3","title":"EpochtalkServerWeb.Helpers.ACL.allow!/3","type":"function"},{"doc":"Helper which returns the active User's priority. Will return priorty of role with highest permissions if the user is authenticated, otherwise anonymous priority is returned if frontend_config.login_required is false otherwise private role priority is returned. If user is banned the Banned role priority is returned.","ref":"EpochtalkServerWeb.Helpers.ACL.html#get_user_priority/1","title":"EpochtalkServerWeb.Helpers.ACL.get_user_priority/1","type":"function"},{"doc":"Returns boolean indicating if supplied User or authenticated Plug.Conn.t() has the a role with the supplied Permission path.","ref":"EpochtalkServerWeb.Helpers.ACL.html#has_permission/2","title":"EpochtalkServerWeb.Helpers.ACL.has_permission/2","type":"function"},{"doc":"Helper for creating breadcrumbs","ref":"EpochtalkServerWeb.Helpers.Breadcrumbs.html","title":"EpochtalkServerWeb.Helpers.Breadcrumbs","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.Helpers.Breadcrumbs.html#build_crumbs/3","title":"EpochtalkServerWeb.Helpers.Breadcrumbs.build_crumbs/3","type":"function"},{"doc":"Helper for obtaining display data for ModerationLog entries","ref":"EpochtalkServerWeb.Helpers.ModerationLogHelper.html","title":"EpochtalkServerWeb.Helpers.ModerationLogHelper","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.Helpers.ModerationLogHelper.html#get_display_data/1","title":"EpochtalkServerWeb.Helpers.ModerationLogHelper.get_display_data/1","type":"function"},{"doc":"Helper for paginating database queries","ref":"EpochtalkServerWeb.Helpers.Pagination.html","title":"EpochtalkServerWeb.Helpers.Pagination","type":"module"},{"doc":"Takes in a query, page and per_page option, returns paginated data and relevant pagination data for frontend (ex. page, limit, next, prev) Example iex&gt; import Ecto.Query iex&gt; alias EpochtalkServer.Models . { Mention , Invitation } iex&gt; alias EpochtalkServerWeb.Helpers.Pagination iex&gt; Mention ...&gt; |&gt; order_by ( asc : :id ) ...&gt; |&gt; Pagination . page_simple ( 1 , per_page : 25 ) { :ok , [ ] , %{ next : false , page : 1 , per_page : 25 , prev : false , total_pages : 1 , total_records : 0 } } iex&gt; Invitation ...&gt; |&gt; order_by ( desc : :email ) ...&gt; |&gt; Pagination . page_simple ( 1 , per_page : 10 ) { :ok , [ ] , %{ next : false , page : 1 , per_page : 10 , prev : false , total_pages : 1 , total_records : 0 } }","ref":"EpochtalkServerWeb.Helpers.Pagination.html#page_simple/3","title":"EpochtalkServerWeb.Helpers.Pagination.page_simple/3","type":"function"},{"doc":"Helper for parsing User input from the front end client","ref":"EpochtalkServerWeb.Helpers.Parse.html","title":"EpochtalkServerWeb.Helpers.Parse","type":"module"},{"doc":"Used to parse markdown within Thread or Post body, assumes","ref":"EpochtalkServerWeb.Helpers.Parse.html#markdown_within_body/1","title":"EpochtalkServerWeb.Helpers.Parse.markdown_within_body/1","type":"function"},{"doc":"Helper for creating dynamic queries","ref":"EpochtalkServerWeb.Helpers.QueryHelper.html","title":"EpochtalkServerWeb.Helpers.QueryHelper","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.Helpers.QueryHelper.html#build_and/3","title":"EpochtalkServerWeb.Helpers.QueryHelper.build_and/3","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Helpers.QueryHelper.html#build_or/3","title":"EpochtalkServerWeb.Helpers.QueryHelper.build_or/3","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Helpers.QueryHelper.html#sort/2","title":"EpochtalkServerWeb.Helpers.QueryHelper.sort/2","type":"function"},{"doc":"Helper for sanitizing User input from the front end client","ref":"EpochtalkServerWeb.Helpers.Sanitize.html","title":"EpochtalkServerWeb.Helpers.Sanitize","type":"module"},{"doc":"Used to sanitize html and entities from Thread or Post body, store sanitized body in body_html ## Example iex&gt; alias EpochtalkServerWeb.Helpers.Sanitize iex&gt; attrs = %{ &quot;body&quot; =&gt; &quot;&lt;i&gt;Hey &lt;b&gt;this&lt;/b&gt; is&lt;/i&gt;&lt;br /&gt; &lt;h1&gt;&lt;script&gt;a&lt;/script&gt;&lt;/h1&gt; &lt;a href=&#39;google.com&#39;&gt;post&lt;/a&gt; &amp;nbsp;&quot; } iex&gt; Sanitize . html_and_entities_from_body ( attrs ) %{ &quot;body&quot; =&gt; &quot;&lt;i&gt;Hey &lt;b&gt;this&lt;/b&gt; is&lt;/i&gt;&lt;br /&gt; &lt;h1&gt;&lt;script&gt;a&lt;/script&gt;&lt;/h1&gt; &lt;a href=&#39;google.com&#39;&gt;post&lt;/a&gt; &amp;nbsp;&quot; , &quot;body_html&quot; =&gt; &quot;&amp;lt;i&gt;Hey &amp;lt;b&gt;this&amp;lt;/b&gt; is&amp;lt;/i&gt;&amp;lt;br /&gt; &amp;lt;h1&gt;&amp;lt;script&gt;a&amp;lt;/script&gt;&amp;lt;/h1&gt; &amp;lt;a href=&#39;google.com&#39;&gt;post&amp;lt;/a&gt; &amp;#38;nbsp;&quot; }","ref":"EpochtalkServerWeb.Helpers.Sanitize.html#html_and_entities_from_body/1","title":"EpochtalkServerWeb.Helpers.Sanitize.html_and_entities_from_body/1","type":"function"},{"doc":"Used to sanitize html and entities from Message subject Example iex&gt; alias EpochtalkServerWeb.Helpers.Sanitize iex&gt; attrs = %{ &quot;subject&quot; =&gt; &quot;&amp;nbsp;&lt;strong&gt;Hello World&lt;/strong&gt;&lt;br /&gt;&lt;script&gt;&lt;/script&gt;&lt;a href=&#39;google.com&#39;&gt;&lt;/a&gt;&quot; } iex&gt; Sanitize . html_and_entities_from_subject ( attrs ) %{ &quot;subject&quot; =&gt; &quot;&amp;#38;nbsp;&amp;lt;strong&amp;gt;Hello World&amp;lt;/strong&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;a href=&#39;google.com&#39;&amp;gt;&amp;lt;/a&amp;gt;&quot; }","ref":"EpochtalkServerWeb.Helpers.Sanitize.html#html_and_entities_from_subject/1","title":"EpochtalkServerWeb.Helpers.Sanitize.html_and_entities_from_subject/1","type":"function"},{"doc":"Used to sanitize html and entities from Thread or Post title Example iex&gt; alias EpochtalkServerWeb.Helpers.Sanitize iex&gt; attrs = %{ &quot;title&quot; =&gt; &quot;&amp;nbsp;&lt;strong&gt;Hello World&lt;/strong&gt;&lt;br /&gt;&lt;script&gt;&lt;/script&gt;&lt;a href=&#39;google.com&#39;&gt;&lt;/a&gt;&quot; } iex&gt; Sanitize . html_and_entities_from_title ( attrs ) %{ &quot;title&quot; =&gt; &quot;&amp;#38;nbsp;&amp;lt;strong&amp;gt;Hello World&amp;lt;/strong&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;a href=&#39;google.com&#39;&amp;gt;&amp;lt;/a&amp;gt;&quot; }","ref":"EpochtalkServerWeb.Helpers.Sanitize.html#html_and_entities_from_title/1","title":"EpochtalkServerWeb.Helpers.Sanitize.html_and_entities_from_title/1","type":"function"},{"doc":"Helper for validating and casting query parameters not associated with a model. Note: Changesets are used to validate query parameters that are associated with a model.","ref":"EpochtalkServerWeb.Helpers.Validate.html","title":"EpochtalkServerWeb.Helpers.Validate","type":"module"},{"doc":"Helper used to validate and cast request parameters directly out of the incoming paylod map (usually a controller function's attrs parameter) to the specified type. Will raise an EpochtalkServerWeb.CustomErrors.InvalidPayload exception if map value does not pass validation and casting. Valid Types type supported options :integer :required , :key , :min , :max :boolean :required , :key Valid Options option description :required true will raise an exception if casting nil :default default value for attr if not provided by request :min min of value being cast to :integer :max max of value being cast to :integer Example iex&gt; alias EpochtalkServerWeb.Helpers.Validate iex&gt; attrs = %{ &quot;page&quot; =&gt; &quot;42&quot; , &quot;extended&quot; =&gt; &quot;true&quot; , &quot;debug&quot; =&gt; &quot;false&quot; } iex&gt; Validate . cast ( attrs , &quot;page&quot; , :integer , min : 1 , max : 99 , required : true ) 42 iex&gt; Validate . cast ( attrs , &quot;limit&quot; , :integer , min : 1 ) nil iex&gt; Validate . cast ( attrs , &quot;debug&quot; , :boolean ) false iex&gt; Validate . cast ( attrs , &quot;extended&quot; , :unsupported ) # returns input if type not supported &quot;true&quot; iex&gt; Validate . cast ( attrs , &quot;post_count&quot; , :integer , required : true ) ** (EpochtalkServerWeb.CustomErrors.InvalidPayload) Invalid payload, key &#39;post_count&#39; should be of type &#39;integer&#39;","ref":"EpochtalkServerWeb.Helpers.Validate.html#cast/4","title":"EpochtalkServerWeb.Helpers.Validate.cast/4","type":"function"},{"doc":"Helper used to validate and cast request parameters. Takes in a String.t() and casts it to the specified type. Will raise an EpochtalkServerWeb.CustomErrors.InvalidPayload exception if string does not pass validation and casting. Valid Types type supported options :integer :required , :key , :min , :max :boolean :required , :key Valid Options option description :key reference name of the value attempting to be cast :required true will raise an exception if casting nil :default default value for attr if not provided by request :min min of value being cast to :integer :max max of value being cast to :integer Example iex&gt; alias EpochtalkServerWeb.Helpers.Validate iex&gt; Validate . cast_str ( &quot;15&quot; , :integer , key : &quot;page&quot; , min : 1 , max : 99 , required : true ) 15 iex&gt; Validate . cast_str ( nil , :integer , key : &quot;limit&quot; , min : 1 ) nil iex&gt; Validate . cast_str ( &quot;false&quot; , :boolean ) false iex&gt; Validate . cast_str ( &quot;true&quot; , :unsupported ) # returns input if type not supported &quot;true&quot; iex&gt; Validate . cast_str ( nil , :integer , key : &quot;post_count&quot; , required : true ) ** (EpochtalkServerWeb.CustomErrors.InvalidPayload) Invalid payload, key &#39;post_count&#39; should be of type &#39;integer&#39;","ref":"EpochtalkServerWeb.Helpers.Validate.html#cast_str/3","title":"EpochtalkServerWeb.Helpers.Validate.cast_str/3","type":"function"},{"doc":"Ensure that keys provided in list are mutually exclusive within attrs map.","ref":"EpochtalkServerWeb.Helpers.Validate.html#mutually_exclusive!/2","title":"EpochtalkServerWeb.Helpers.Validate.mutually_exclusive!/2","type":"function"},{"doc":"Plug that pre-parses request body and raises errors if there are problems","ref":"EpochtalkServerWeb.Plugs.PrepareParse.html","title":"EpochtalkServerWeb.Plugs.PrepareParse","type":"module"},{"doc":"Callback implementation for Plug.call/2 .","ref":"EpochtalkServerWeb.Plugs.PrepareParse.html#call/2","title":"EpochtalkServerWeb.Plugs.PrepareParse.call/2","type":"function"},{"doc":"Pre-parses request body and checks for errors with payload. (ex: Malformed JSON or Payload too large)","ref":"EpochtalkServerWeb.Plugs.PrepareParse.html#check_valid_payload_body/2","title":"EpochtalkServerWeb.Plugs.PrepareParse.check_valid_payload_body/2","type":"function"},{"doc":"Callback implementation for Plug.init/1 .","ref":"EpochtalkServerWeb.Plugs.PrepareParse.html#init/1","title":"EpochtalkServerWeb.Plugs.PrepareParse.init/1","type":"function"},{"doc":"Plug that tracks user IP address for PUT POST or PATCH operations","ref":"EpochtalkServerWeb.Plugs.TrackIp.html","title":"EpochtalkServerWeb.Plugs.TrackIp","type":"module"},{"doc":"Callback implementation for Plug.call/2 .","ref":"EpochtalkServerWeb.Plugs.TrackIp.html#call/2","title":"EpochtalkServerWeb.Plugs.TrackIp.call/2","type":"function"},{"doc":"Callback implementation for Plug.init/1 .","ref":"EpochtalkServerWeb.Plugs.TrackIp.html#init/1","title":"EpochtalkServerWeb.Plugs.TrackIp.init/1","type":"function"},{"doc":"Stores User IP when User is performing actions that modify data in the database","ref":"EpochtalkServerWeb.Plugs.TrackIp.html#track_ip_post_request/2","title":"EpochtalkServerWeb.Plugs.TrackIp.track_ip_post_request/2","type":"function"},{"doc":"Plug that updates User last active date","ref":"EpochtalkServerWeb.Plugs.UserLastActive.html","title":"EpochtalkServerWeb.Plugs.UserLastActive","type":"module"},{"doc":"Callback implementation for Plug.call/2 .","ref":"EpochtalkServerWeb.Plugs.UserLastActive.html#call/2","title":"EpochtalkServerWeb.Plugs.UserLastActive.call/2","type":"function"},{"doc":"Callback implementation for Plug.init/1 .","ref":"EpochtalkServerWeb.Plugs.UserLastActive.html#init/1","title":"EpochtalkServerWeb.Plugs.UserLastActive.init/1","type":"function"},{"doc":"Updates User last active date","ref":"EpochtalkServerWeb.Plugs.UserLastActive.html#update_user_last_active/2","title":"EpochtalkServerWeb.Plugs.UserLastActive.update_user_last_active/2","type":"function"},{"doc":"This module is used to track User presence in websocket channels. Currently used by the user:public channel to check if a User is online.","ref":"EpochtalkServerWeb.Presence.html","title":"EpochtalkServerWeb.Presence","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.Presence.html#child_spec/1","title":"EpochtalkServerWeb.Presence.child_spec/1","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.fetch/2 .","ref":"EpochtalkServerWeb.Presence.html#fetch/2","title":"EpochtalkServerWeb.Presence.fetch/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Presence.html#fetchers_pids/0","title":"EpochtalkServerWeb.Presence.fetchers_pids/0","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.get_by_key/2 .","ref":"EpochtalkServerWeb.Presence.html#get_by_key/2","title":"EpochtalkServerWeb.Presence.get_by_key/2","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.list/1 .","ref":"EpochtalkServerWeb.Presence.html#list/1","title":"EpochtalkServerWeb.Presence.list/1","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.track/3 .","ref":"EpochtalkServerWeb.Presence.html#track/3","title":"EpochtalkServerWeb.Presence.track/3","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.track/4 .","ref":"EpochtalkServerWeb.Presence.html#track/4","title":"EpochtalkServerWeb.Presence.track/4","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.untrack/2 .","ref":"EpochtalkServerWeb.Presence.html#untrack/2","title":"EpochtalkServerWeb.Presence.untrack/2","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.untrack/3 .","ref":"EpochtalkServerWeb.Presence.html#untrack/3","title":"EpochtalkServerWeb.Presence.untrack/3","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.update/3 .","ref":"EpochtalkServerWeb.Presence.html#update/3","title":"EpochtalkServerWeb.Presence.update/3","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.update/4 .","ref":"EpochtalkServerWeb.Presence.html#update/4","title":"EpochtalkServerWeb.Presence.update/4","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.html","title":"EpochtalkServerWeb.Router","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.Router.html#api/2","title":"EpochtalkServerWeb.Router.api/2","type":"function"},{"doc":"Callback invoked by Plug on every request.","ref":"EpochtalkServerWeb.Router.html#call/2","title":"EpochtalkServerWeb.Router.call/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.html#enforce_auth/2","title":"EpochtalkServerWeb.Router.enforce_auth/2","type":"function"},{"doc":"Callback required by Plug that initializes the router for serving web requests.","ref":"EpochtalkServerWeb.Router.html#init/1","title":"EpochtalkServerWeb.Router.init/1","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.html#maybe_auth/2","title":"EpochtalkServerWeb.Router.maybe_auth/2","type":"function"},{"doc":"Description of all events occuring in application","ref":"EpochtalkServerWeb.Telemetry.html","title":"EpochtalkServerWeb.Telemetry","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"EpochtalkServerWeb.Telemetry.html#child_spec/1","title":"EpochtalkServerWeb.Telemetry.child_spec/1","type":"function"},{"doc":"Handles User websocket channels. These channels are used to broadcast events to the client. With the current design, API route can broadcast messages when an action is performed, this notifies the client to perform an action, such as requesting data from the server. Supported User Channels channel⠀⠀⠀⠀⠀⠀ authed purpose user:public maybe All logged in and anonymous users are connected to this channel. Used to track user's online status and to broadcast MOTD announcements. user:&lt;user_id&gt; yes Used to broadcast changes that affect a particular user (ex: logout) user:role yes Used to broadcast when a role has its permissions changed Client Handled Messages (messages broadcast from server) broadcast message channel⠀⠀⠀⠀⠀⠀ payload⠀⠀⠀⠀⠀⠀ client action announcement user:public %{} fetches MOTD announcement reauthenticate user:&lt;user_id&gt; %{} reauthenticates, fetches user changes logout user:&lt;user_id&gt; %{:token} logout all user sessions with token newMessage user:&lt;user_id&gt; %{} fetches new messages/counts refreshMentions user:&lt;user_id&gt; %{} fetches new mentions/counts permissionsChanged user:role %{} reauthenticates, fetches new permissions Server Handled Messages (messages broadcast from client) broadcast message channel payload⠀⠀⠀⠀⠀⠀ server action is_online user:public %{:user_id} replies to client with the specified user's online status","ref":"EpochtalkServerWeb.UserChannel.html","title":"EpochtalkServerWeb.UserChannel","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.UserChannel.html#child_spec/1","title":"EpochtalkServerWeb.UserChannel.child_spec/1","type":"function"},{"doc":"Handles message is_online , checks user:public channel to see if User with user_id is connected using Presence. Returns user_id and online , a boolean indicating if the User is connected.","ref":"EpochtalkServerWeb.UserChannel.html#is_online/2","title":"EpochtalkServerWeb.UserChannel.is_online/2","type":"function"},{"doc":"Handles joining of user:public channel. Message is broadcast on this channel when a MOTD is updated, this tells the client to fetch the MOTD.","ref":"EpochtalkServerWeb.UserChannel.html#join_public_channel/1","title":"EpochtalkServerWeb.UserChannel.join_public_channel/1","type":"function"},{"doc":"Handles joining of user:role channel. Messages are broadcast on this channel when a roles are updated, which tell the client to reauthenticate inorder to fetch new roles. Messages contain the lookup of the updated role, the client will check the user's roles for the role lookup and reauthenticate if necessary.","ref":"EpochtalkServerWeb.UserChannel.html#join_role_channel/1","title":"EpochtalkServerWeb.UserChannel.join_role_channel/1","type":"function"},{"doc":"Handles joining of user:&lt;user_id&gt; channel, enforces that user is authenticated. This channel is used to broadcast events such as reauthenticate or logout to a specific User with matching user_id .","ref":"EpochtalkServerWeb.UserChannel.html#join_user_channel/2","title":"EpochtalkServerWeb.UserChannel.join_user_channel/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.UserChannel.html#start_link/1","title":"EpochtalkServerWeb.UserChannel.start_link/1","type":"function"},{"doc":"Tracks a User that joins a channel using Presence . Currently used to track a User that joins the user:public channel. Used by forum order to keep track of online users.","ref":"EpochtalkServerWeb.UserChannel.html#track_user_online/1","title":"EpochtalkServerWeb.UserChannel.track_user_online/1","type":"function"},{"doc":"Handles User socket connection and authentication.","ref":"EpochtalkServerWeb.UserSocket.html","title":"EpochtalkServerWeb.UserSocket","type":"module"},{"doc":"Connects to socket and authenticates if token is provided, otherwise connects anonymously.","ref":"EpochtalkServerWeb.UserSocket.html#connect_maybe_auth/3","title":"EpochtalkServerWeb.UserSocket.connect_maybe_auth/3","type":"function"},{"doc":"Returns socket id &quot;user:&lt;user_id&gt;&quot; if authenticated and nil if not authenticated.","ref":"EpochtalkServerWeb.UserSocket.html#maybe_socket_id/1","title":"EpochtalkServerWeb.UserSocket.maybe_socket_id/1","type":"function"},{"doc":"Exception raised when api request payload is incorrect","ref":"EpochtalkServerWeb.CustomErrors.AutoModeratorReject.html","title":"EpochtalkServerWeb.CustomErrors.AutoModeratorReject","type":"exception"},{"doc":"Exception raised when api request payload is incorrect","ref":"EpochtalkServerWeb.CustomErrors.InvalidPayload.html","title":"EpochtalkServerWeb.CustomErrors.InvalidPayload","type":"exception"},{"doc":"Exception raised when api request payload is incorrect","ref":"EpochtalkServerWeb.CustomErrors.InvalidPermission.html","title":"EpochtalkServerWeb.CustomErrors.InvalidPermission","type":"exception"},{"doc":"Exception raised when api request payload JSON is malformed","ref":"EpochtalkServerWeb.CustomErrors.MalformedPayload.html","title":"EpochtalkServerWeb.CustomErrors.MalformedPayload","type":"exception"},{"doc":"Exception raised when api request payload is too large","ref":"EpochtalkServerWeb.CustomErrors.OversizedPayload.html","title":"EpochtalkServerWeb.CustomErrors.OversizedPayload","type":"exception"}]